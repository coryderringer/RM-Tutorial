{% extends "_base.htm" %}
{% block title %}
	Order effects
{% endblock%}

{% block bodycontent %}

<script type="text/javascript">

/// Overall tutorial progress
var progress = {{progress}}

/// Checkpoint for page
  var current = 0;

/// Graph
  var file1 = "/static/stimuli/OrderEffects/carryover1.csv";
  var file2 = "/static/stimuli/OrderEffects/carryover3.csv";
  var file3 = "/static/stimuli/OrderEffects/carryover4.csv";

/// Name variables here
	var	yLabel = "Accuracy",
		condLabel = "Exercise routine",
		xLabel = "Time (minutes)",
		covariate = "Arousal"
		xMax = 20,
		yMax = 14;

/// Variables for calculating stuff
  var parsedData;
  var iv = [];
  var dv = [];
  var measure1 = [];
  var meanControl1 = [];
  var meanExperimental1 = [];

  var measure2 = [];
  var meanControl2 = [];
  var meanExperimental2 = [];

  var measure3 = [];
  var meanControl3 = [];
  var meanExperimental3 = [];

/// Text

  var text = [
    "One thing that is typically carried out in within-subjects experiments is <b>counterbalancing</b>: <i>randomizing the order of the conditions so different subjects experience the conditions in different orders</i>. In our study, there are only two conditions, so there are only two possible orders they can be experienced in. On the left, you can see the original graph from the study where the experimental condition is experienced before the control condition. On the right, we will look at what happens for subjects who experience the control condition (reading the short story) before the experimental condition (the rigorous exercise regimen).",

    "Again, participants first go through the intense exercise regimen (the experimental condition), and then have their spatial reasoning ability measured. Just like in the earlier experiment, this results in reasonably high accuracy scores.",

    "About 45 minutes Later in the experiment, they experience the control condition. They read a short story and have their spatial reasoning ability measured again. This time, their scores in the control condition are significantly lower! To see why, let's look at their measured arousal levels in this version of the experiment.",

    "When they experience the experimental condition, their arousal level increases from its baseline. However, in this version of the experiment, there is a much longer time between both conditions. After they go through the intense exercise regimen and have their spatial reasoning ability measured for the first time, the participants are asked to sit and rest for 40 minutes. What do you think happens to their arousal levels?",

    "By the time they experience the control condition and read the short stories, their arousal levels have returned to their baseline levels! In this experiment, the control condition is not contaminated by the experimental condition. Therefore, their scores in the control condition are as we expected: their spatial reasoning has lower accuracy because their arousal levels are as we expected them to be when reading short stories.",

    "In general terms, this is called an order effect, where exposure to one condition changes a participant’s responses to a later condition. More specifically, this is an example of a <b>carryover effect</b>, a type of order effect where one condition ‘contaminates’ the other. This is a serious threat to internal validity in within-subjects designs because it could mean a particular condition is not manipulating the mechanisms you are interested in (in this case, arousal) the way you intend."
    ]

/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}

/// Function to move text forward and back within page

function next(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 6</i>");

    if (current<text.length-1) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    //Does different things each time page advances
    if (current==1) { 
      svg2.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 1);
      svg2.select("path").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#controlMean2").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#controlM2").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { 
      svg2.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 0); 
      // svg2.select("#experimentalMean2").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#experimentalM2").transition().duration(800).delay(200).style("opacity", 1);
      svg2.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 0); 
    }
    else if (current==3) { 
      svg2.select("path").transition().duration(800).delay(200).style("opacity", 0);
      svg2.select("#experimentalMean2").transition().duration(800).delay(200).style("opacity", 1);
      svg2.select("#experimentalM2").transition().duration(800).delay(200).style("opacity", 1);
      svg2.select("#controlMean2").transition().duration(800).delay(200).style("opacity", 1);
      svg2.select("#controlM2").transition().duration(800).delay(200).style("opacity", 1);

      svg1.select("path").transition().duration(800).delay(200).style("opacity", 0);
      svg1.select("#experimentalMean1").transition().duration(800).delay(200).style("opacity", 1);
      svg1.select("#experimentalM1").transition().duration(800).delay(200).style("opacity", 1);
      svg1.select("#controlMean1").transition().duration(800).delay(200).style("opacity", 1);
      svg1.select("#controlM1").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==4) { svg2.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==text.length-1) { 
      $("#next").attr("disabled", true);
      showQuiz(); 
    }
  
}

function previous(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 6</i>");

    if (current>0) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==3) { 
      svg2.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 1); 
    }
    else if (current==2) { 
      svg2.select("path").transition().duration(800).delay(200).style("opacity", 0);
      // svg2.select("#experimentalMean2").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#experimentalM2").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#controlMean2").transition().duration(800).delay(200).style("opacity", 1);
      // svg2.select("#controlM2").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==1) { 
      svg2.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 1); 
      // svg2.select("#controlMean2").transition().duration(800).delay(200).style("opacity", 0);
      // svg2.select("#controlM2").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==0) {
      svg2.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 0);
      svg2.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 1); 
      svg2.select("#experimentalMean2").transition().duration(800).delay(200).style("opacity", 0);
      svg2.select("#experimentalM2").transition().duration(800).delay(200).style("opacity", 0);
      $("#previous").attr("disabled", true); 
    }
}

/// Function to show quiz

function showQuiz() {
  $('#continue').hide();
  $('#quiz').show();
}

/// Shows quiz answer

function answerQuiz2() {

  Q2Outcome = $('input[name=q2]:checked', '#Quiz2').val();

  $('#answer').hide()
  $('#optionA, #optionB').css('opacity', '0.3');
  $('#q2a, #q2b, #q2c').attr('disabled', true);
  $('#A2').show();
  $('#submit').show();

  if (Q2Outcome=='C') { 
    $('#A2').html('<b>Correct!</b><br>Actually, all are valid ways to deal with carryover effects.<br><br>If you used a between-subjects design, different groups of participants would experience the different conditions and each manipulation would not be able to contaminate the other. However, the usual drawbacks of this design still apply.<br><br>If we want to stick with the within-subjects design, we could increase the time between the conditions so that arousal in the experimental condition has time to decay. However, we do not always know how long it takes for participants to return to normal on some important characteristic. Another drawback is that extending the time is not always practically feasible (assuming you don’t want an experiment to last for days).<br><br>In the next section, we will look');
  }
  else {
    $('#A2').html('<b>Sorry, that is incorrect!</b><br>This study uses a within-subjects design because the same group experiences both conditions – the exercise regimen and the control task – and gets measured on the dependent variable (spatial reasoning ability) after completing each condition.');
  }
}

/// Submit function

function MySubmit(){
  console.log('Submit dat!');
  $('#Q2').val(Q2Outcome);
  progress += 1;
  $('#progressinput').val(progress);
  $('#myForm').submit();
}

</script>

<div class="pg" style="height:940px">

	<h2><center>Carryover effects</center></h2>
	
	<br>
  
  <div id="text" style="display:show; height:100px" align="justify">
    <script>document.write(text[current])</script>
  </div>

  <div id="progress" style="display:show; height:10px; font-size:12px;" align="right">
    <i>Page <script>document.write(current+1)</script> of 6</i>
  </div>

  <br>

  <div align="right">
    <button id="previous" onclick="current--; previous(current)" disabled="true">&larr; Previous</button>&nbsp;&nbsp;<button id="next" onclick="current++; next(current);">Next &rarr;</button>
  </div>

  <div align="center">
	   <div id="graph1" width="900" height="600" style="display:inline-block"></div>
     <div id="graph2" width="900" height="600" style="display:inline-block"></div>
  </div>

  <br>

  <div id="graph3" width="900" height="600" align="center" style="opacity:0.3"></div>

  <!-- <div id="graph3" width="900" height="600" align="center" style="display:none"></div> -->


  <br>

	<div id="quiz" width="900" style="display:none">

    <p><b>What is the best way to deal with order and carryover effects?</b></p>

    <form id="Quiz2" style="position:relative;left:20px">
      <input type="radio" value="A" name="q2" id="q2a"><label for="q2a"><span id="optionA">&nbspUse a between-subjects design</span></label><br>
      <input type="radio" value="B" name="q2" id="q2b"><label for="q2b"><span id="optionB">&nbspIncrease the time between the experimental and control conditions so that arousal has time to decay</span></label><br>
      <input type="radio" value="C" name="q2" id="q2c"><label for="q2c">&nbspUse a counterbalanced design where different subjects experience the conditions in different orders</label><br>
    </form><br>

    <center><button id="answer" onclick="answerQuiz2()">Check answer</button></center>

    <div id="A2" style="display:none"></div>

  </div>

  <br>

  <center>
    <form id="myForm" method="post" action="/OrderEffects">
      <input type="submit" id="submit" onclick="MySubmit()" value="Continue" style="display:none"/>
      <input type="hidden" id="Q2" name="Q2" value="">
      <input type="hidden" id="progressinput" name="progressinput" value="">
    </form>
  </center>

  <br>

	<center>Or <a href="/logout">Logout.</a></center>

</div>

<style>

	body {
	  font: 14px sans-serif;
	}

	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}

	.dot {
	  stroke: #000;
	}

	path { 
	    stroke: steelblue;
	    stroke-width: 2;
	    fill: none;
	}

</style>

<!------------------ Graph 1 ------------------------>

<script type="text/javascript">

// Sets dimensions of graph and axes

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 390 - margin.left - margin.right,
    height = 290 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond1 = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Exercise regimen","Read short story"]);

var color1 = d3.scale.category10()
    .domain(["Exercise regimen", "Read short story"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg1 = d3.select("#graph1").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line1 = d3.svg.line()
  .interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr1 = new Object();
  lineBlockerAttr1.x=width/3.5;
  lineBlockerAttr1.y=0;

var pointBlockerAttr1 = new Object();
  pointBlockerAttr1.x=width/2;
  pointBlockerAttr1.y=0;

// Reads data from .csv file

d3.csv(file1, function(error, data) {
    if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure1.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Read short story") {
        meanControl1.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Exercise regimen") {
        meanExperimental1.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

    data.forEach(function(d) {
      d.iv = +d.iv;
      d.dv = +d.dv;
      d.t = +d.t;
      d.condition = d.condition;
    });

    // Appends line

    svg1.append("path")
      .attr("class", "line")
      .style("stroke", "red")
      .style("opacity", 1)
      .attr("d", line1(data));

    // Appends means

    var controlMean1 = svg1.append("line")
      .attr("id", "controlMean1")
      .attr("x1", cond1("Read short story")-x(1))
      .attr("x2", cond1("Read short story")+x(1))
      .attr("y1", y(d3.mean(meanControl1)))
      .attr("y2", y(d3.mean(meanControl1)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      // .style("stroke", color("Control"));
      .style("stroke", color1("Read short story"));

    var controlM1 = svg1.append("text")
        .attr("id", "controlM1")
        .attr("x", cond1("Read short story")+x(2.2))
        .attr("y", y(d3.mean(meanControl1)))
        .attr("dy", ".35em")
        .attr("dx", x(1))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanControl1).toFixed(2));

    var experimentalMean1 = svg1.append("line")
      .attr("id", "experimentalMean1")
      .attr("x1", cond1("Exercise regimen")-x(1))
      .attr("x2", cond1("Exercise regimen")+x(1))
      .attr("y1", y(d3.mean(meanExperimental1)))
      .attr("y2", y(d3.mean(meanExperimental1)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      // .style("stroke", color("Experimental"));
      .style("stroke", color1("Exercise regimen"));

    var experimentalM1 = svg1.append("text")
      .attr("id", "experimentalM1")
      .attr("x", cond1("Exercise regimen")+x(2.2))
      .attr("y", y(d3.mean(meanExperimental1)))
      .attr("dy", ".35em")
      .attr("dx", x(1))
      .style("opacity", 0)
      .style("text-anchor", "end")
      .text(d3.mean(meanExperimental1).toFixed(2));

    // Appends points

    svg1.selectAll(".dot")
        .data(data)
    .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 3.5)
        .attr("cx", function(d) { return cond1(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
        .style("fill", function(d) { return color1(d.condition); })
        .style("opacity", 1);

    // Appends axes

    svg1.append("g")
      .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text(xLabel);

    svg1.append("g")
        .attr("class", "y axis")
        .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text(yLabel);

    svg1.append("text")
        .attr("x", cond1("Read short story"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Read short story");

    svg1.append("text")
        .attr("x", cond1("Exercise regimen"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Exercise regimen");

});

</script>

<!------------------ Graph 2 ------------------------>

<script type="text/javascript">

// Sets dimensions of graph and axes

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond2 = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Read short story", "Exercise regimen"]);

var color2 = d3.scale.category10()
    .domain(["Exercise regimen", "Read short story"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg2 = d3.select("#graph2").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line2 = d3.svg.line()
  .interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr2 = new Object();
  lineBlockerAttr2.x=width/2;
  lineBlockerAttr2.y=0;

var pointBlockerAttr2 = new Object();
  pointBlockerAttr2.x=width/2;
  pointBlockerAttr2.y=0;

// Reads data from .csv file

d3.csv(file2, function(error, data) {
    if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure2.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Read short story") {
        meanControl2.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Exercise regimen") {
        meanExperimental2.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

    data.forEach(function(d) {
      d.iv = +d.iv;
      d.dv = +d.dv;
      d.t = +d.t;
      d.condition = d.condition;
    });

    // Appends line

    svg2.append("path")
      .attr("class", "line")
      .style("stroke", "red")
      .style("opacity", 0)
      .attr("d", line2(data));

    // Append line blocker

    var lineBlocker2 = svg2.append("rect")
      .attr("id", "lineBlocker2")
      .attr("width", width/2)
      .attr("height", height)
      .attr("x", function(d) {return lineBlockerAttr2.x;})
      .attr("y", function(d) {return lineBlockerAttr2.y;})
      .style("fill", "white")
      .style("opacity", 1);

    // Appends means

    var controlMean2 = svg2.append("line")
      .attr("id", "controlMean2")
      .attr("x1", cond2("Read short story")-x(1))
      .attr("x2", cond2("Read short story")+x(1))
      .attr("y1", y(d3.mean(meanControl2)))
      .attr("y2", y(d3.mean(meanControl2)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      // .style("stroke", color("Control"));
      .style("stroke", color2("Read short story"));

    var controlM2 = svg2.append("text")
        .attr("id", "controlM2")
        .attr("x", cond2("Read short story")+x(2.2))
        .attr("y", y(d3.mean(meanControl2)))
        .attr("dy", ".35em")
        .attr("dx", x(1))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanControl2).toFixed(2));

    var experimentalMean2 = svg2.append("line")
      .attr("id", "experimentalMean2")
      .attr("x1", cond2("Exercise regimen")-x(1))
      .attr("x2", cond2("Exercise regimen")+x(1))
      .attr("y1", y(d3.mean(meanExperimental2)))
      .attr("y2", y(d3.mean(meanExperimental2)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color2("Exercise regimen"));

    var experimentalM2 = svg2.append("text")
      .attr("id", "experimentalM2")
      .attr("x", cond2("Exercise regimen")+x(2.2))
      .attr("y", y(d3.mean(meanExperimental2)))
      .attr("dy", ".35em")
      .attr("dx", x(1))
      .style("opacity", 0)
      .style("text-anchor", "end")
      .text(d3.mean(meanExperimental2).toFixed(2));

    // Appends points

    svg2.selectAll(".dot")
        .data(data)
    .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 3.5)
        .attr("cx", function(d) { return cond2(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
        .style("fill", function(d) { return color2(d.condition); })
        .style("opacity", 0);

    // Append point blocker

    var pointBlocker2 = svg2.append("rect")
      .attr("id", "pointBlocker2")
      .attr("width", width/2)
      .attr("height", height)
      .attr("x", function(d) {return pointBlockerAttr2.x;})
      .attr("y", function(d) {return pointBlockerAttr2.y;})
      .style("fill", "white")
      .style("opacity", 1);

    // Appends axes

    svg2.append("g")
      .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text(xLabel);

    svg2.append("g")
        .attr("class", "y axis")
        .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text(yLabel);

    svg2.append("text")
        .attr("x", cond2("Read short story"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Read short story");

    svg2.append("text")
        .attr("x", cond2("Exercise regimen"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Exercise regimen");

});

</script>

<!------------------ Graph 3 ------------------------>

<script type="text/javascript">

// Sets dimensions of graph and axes

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 390 - margin.left - margin.right,
    height = 290 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond3 = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Exercise regimen","Read short story"]);

var color3 = d3.scale.category10()
    .domain(["Exercise regimen", "Read short story"]);

var xAxis = d3.svg.axis()
    .scale(cond3)
    .orient("bottom")
    .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg3 = d3.select("#graph3").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line3 = d3.svg.line()
  .interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr3 = new Object();
  lineBlockerAttr3.x=width/3.5;
  lineBlockerAttr3.y=0;

var pointBlockerAttr3 = new Object();
  pointBlockerAttr3.x=width/2;
  pointBlockerAttr3.y=0;

// Reads data from .csv file

d3.csv(file3, function(error, data) {
    if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure3.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Read short story") {
        meanControl3.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Exercise regimen") {
        meanExperimental3.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

    data.forEach(function(d) {
      d.iv = +d.iv;
      d.dv = +d.dv;
      d.t = +d.t;
      d.condition = d.condition;
    });

    // Appends line

    // svg3.append("path")
    //   .attr("class", "line")
    //   .style("stroke", "red")
    //   .style("opacity", 1)
    //   .attr("d", line3(data));

    // Appends means

    var controlMean3 = svg3.append("line")
      .attr("id", "controlMean1")
      .attr("x1", cond3("Read short story")-x(1))
      .attr("x2", cond3("Read short story")+x(1))
      .attr("y1", y(d3.mean(meanControl3)))
      .attr("y2", y(d3.mean(meanControl3)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color3("Read short story"));

    var controlM3 = svg3.append("text")
        .attr("id", "controlM1")
        .attr("x", cond3("Read short story")+x(2.2))
        .attr("y", y(d3.mean(meanControl3)))
        .attr("dy", ".35em")
        .attr("dx", x(1))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanControl3).toFixed(2));

    var experimentalMean3 = svg3.append("line")
      .attr("id", "experimentalMean1")
      .attr("x1", cond3("Exercise regimen")-x(1))
      .attr("x2", cond3("Exercise regimen")+x(1))
      .attr("y1", y(d3.mean(meanExperimental3)))
      .attr("y2", y(d3.mean(meanExperimental3)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color3("Exercise regimen"));

    var experimentalM3 = svg3.append("text")
      .attr("id", "experimentalM1")
      .attr("x", cond3("Exercise regimen")+x(2.2))
      .attr("y", y(d3.mean(meanExperimental1)))
      .attr("dy", ".35em")
      .attr("dx", x(1))
      .style("opacity", 1)
      .style("text-anchor", "end")
      .text(d3.mean(meanExperimental3).toFixed(2));

    // Appends points

    svg3.selectAll(".dot")
        .data(data)
    .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 3.5)
        .attr("cx", function(d) { return cond3(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
        .style("fill", function(d) { return color3(d.condition); })
        .style("opacity", 1);

    // Appends axes

    svg3.append("g")
      .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);
    // .append("text")
    //   .attr("class", "label")
    //   .attr("x", width)
    //   .attr("y", -6)
    //   .style("text-anchor", "end")
    //   .text(xLabel);

    svg3.append("g")
        .attr("class", "y axis")
        .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text(yLabel);

    // svg3.append("text")
    //     .attr("x", cond1("Read short story"))
    //     .attr("y", y(2))
    //     .attr("dy", ".35em")
    //     .style("text-anchor", "middle")
    //     .text("Read short story");

    // svg3.append("text")
    //     .attr("x", cond1("Exercise regimen"))
    //     .attr("y", y(2))
    //     .attr("dy", ".35em")
    //     .style("text-anchor", "middle")
    //     .text("Exercise regimen");

});

</script>

{% endblock %}
