{% extends "_base.htm" %}
{% block title %}
	Within-Subject Designs
{% endblock%}


{% block bodycontent %}

<form id="dataform" method="post" action="/WithinSubject">
	<input id="Q3" name="Q3" type="hidden">
	<input id="numbersims" name="numbersims" type="hidden">
	<input id="progressinput" name="progressinput" type="hidden">
	<input id="Submit" onclick="MySubmit()" value="Submit" type="hidden">
</form>


<div class="pg">
	<center>
		<span style="display:inline-block"><b>Between-Subjects</b></span>
		<span style="display:inline-block;position:relative;left:170px"><b>Within-Subjects</b></span>
		<div id="firstrow">
			<span style="position:relative;top:-100px;display:inline-block;margin-right:25px;visibility:hidden">
				<b>High<br>Population Variance</b>
			</span>	
			<div id="between1" style="display:inline-block">
				<div id="graph1"></div>
				<div class="sigTrack" style="display:none;position:relative;top:-55px">Significant Results: <span id="sigTrack1"></span></div>
				<div class="pdiv" style="display:none">p = <span id="p1"></span></div>
				
				<!-- <div id="ttest1" class="ttest">
					<span id="tspan1">t=1.00</span><br>
					<span id="pspan1">p=.50</span><br>
					<span id="dspan1">power=.8</span><br>
				</div> -->
			</div>
			
			<div id="within1" style="display:inline-block">
				<div id="graph2"></div>
				<div class="sigTrack" style="display:none;position:relative;top:-55px">Significant Results: <span id="sigTrack2"></span></div>
				<div class="pdiv" style="display:none">p = <span id="p2"></span></div>
			</div>
		</div>
		
		
		<br>

		<div id="secondrow" style="display:none">
			<span style="display:inline-block;margin-right:25px;position:relative;top:-100px">
				<b>Low<br>Population Variance</b>
			</span>
			<div id="between2" style="display:inline-block">
				<div id="graph3"></div>
				<div class="sigTrack" style="display:none;position:relative;top:-55px">Significant Results: <span id="sigTrack3"></span></div>
				<div class="pdiv" style="display:none">p = <span id="p3"></span></div>
			</div>
			
			<div id="within2" style="display:inline-block">
				<div id="graph4"></div>
				<div class="sigTrack" style="display:none;position:relative;top:-55px">Significant Results: <span id="sigTrack4"></span></div>
				<div class="pdiv" style="display:none">p = <span id="p4"></span></div>
			</div>
		</div>
		
		<br>
		<button id="ResampleButton" style="width:100px;display:none;float:left" onclick="UpdateData()">Resample</button>
	</center>	
	<br>

	<div id="Text1">
		<p>To expand on this point, let's look at what each design is actually comparing between the two conditions. Here we have some hypothetical data presented as a between-subjects comparison (on the left) and as a within-subjects comparison (on the right).</p>

		<p>Notice that the lines in each graph reflect the difference between the questions we're asking with each design: In a between-subjects design, we want to know if one group is different from another group after some treatment. To examine this, we usually compare the mean DV scores for each group (the blue and orange lines in the graph on the left). In a within-subjects design, we want to know if one treatment works better than the other treatment for the same group of people. This is illustrated above by the lines connecting across the conditions: each line represents a participant, and each dot at the end of the line represents the participant's weight at the end of the Fruit or Veggie condition.</p>

		<div id="Quiz3">
			<p id="Question3">Intuitively, which chart would you say is more convincing (i.e. which shows the Vegetable Condition having a stronger effect?)</p>


			<form id="Q3Answers">
				<input type="radio" name="q3" value="A" id="q3a"><label for="q3a">The between-subjects design</label><br>
				<input type="radio" name="q3" value="B" id="q3b"><label for="q3b">The within-subjects design</label><br>
			</form><br>

			<button id="AnswerButton3" onclick="RecordQuiz3()" style="width:100px">Next</button>
			<!-- <button id="LearnButton" onclick="LearnVisible()" style="float:right">Learn More</button> -->
			<br>
			<div id="ResponseDiv3" style=""></div>
<!-- 		<div id="DataGenerationExplanation" class="pg" style="display:none;width:700px;border:2px solid gray;margin-top:20px">
			<center><b>Data Simulations:</b></center><br>
			To mimic the process of drawing a sample from the population, each design is simulated here by drawing a random sample of either 10 (within-subjects) or 20 (between-subjects) values from a normal distribution (mean = 200, standard deviation = 9). This reflects the baseline weight of each participant in our study.<br>
			<br>
			If the study were conducted using a <b>between-subjects design,</b> we would then randomly assign each person to one condition or the other (10 participants per condition). Because the treatments will not affect everyone the same way, we should represent the effectiveness of each treatment probabilistically using another normal distribution. For the Fruit Condition, we draw 10 values from a distribution with a mean of 11 pounds and a standard deviation of 6 pounds. The 10 values in the Veggie Condition are drawn from a distribution with a mean of 25 pounds, with the same standard deviation of 6 pounds. These distributions reflect the weight lost in each condition (e.g. participants in the Fruit Condition lost an average of 11 pounds). The final result is obtained by subtracting each Fruit or Veggie Condition value from the corresponding baseline value. For example, Participant 1's weight at the start of the study is drawn from the baseline distribution, and the value is 205 pounds. This participant is in the Veggie Condition, so we simulate the amount of weight lost by drawing from another distribution, with a result of 15 pounds. Participant 1's weight on the graph would then be 190 pounds.<br>
			<br>
			<b>In the within-subjects design,</b> we draw the same baseline distribution and the same treatment distributions. <b>Importantly, because we're comparing the same group at two different timepoints, we really only care about the adjustment distributions.</b> The baseline distribution itself could have a mean of 300 or 100, with a standard deviation of 5 or 50, and it would make no difference on the outcome for a within-subjects design. This is because instead of testing the difference between the means of each group, we take each individual's difference score (the difference between their weight lost in the fruit condition and in the vegetable condition), and test to see if the mean of the difference scores is significantly greater than zero.
		</div> -->
		</div>
	</div>

	<div id="AnswerA" style="display:none">
		<p>Oh no, your intuition wasn't right this time! That's okay.</p>
	</div>
	<div id="AnswerB" style="display:none">
		<p>Right!</p>
	</div>
	<div id="Text2" style="display:none">
		<p>This is the first advantage of within-subject designs: <i>they're insensitive to the population variance</i>. Look at the wide distribution of weights in each condition for both graphs. With a between-subjects design (left side), we're punished statistically by the question we're asking. When we want to know if the difference between the group means is reliably (i.e. significantly) greater than zero, we have to have a context against which to judge the difference. That context is the variation in each group: the wider each group is spread, the more statistical power we lose in a between-subjects design.</p>

		<p>Asking a different question using a within-subjects design means that the differences within each condition will only affect our statistical power if they affect the consistency of the difference scores (i.e. if they're the result of differences in the effectiveness of the treatment), <i>but they will not affect our power if they're the result of individual differences unrelated to the treatment, which is the case here!</i></p>
	</div>

	<div id="Text3" style="display:none">
		<p>Here we can see that the between-subjects design does much better when the population variance is low. With each group more tightly distributed around its mean, it’s easier to tell that there is a real difference between the group means. However, notice that the p value for the within-subjects design is exactly the same regardless of the population variance: <b>within-subjects designs are not affected by the population variance</b>.</p>

		<p>Take a minute or two to play around with this simulator a bit. See what happens when you generate different datasets using the "Resample" button: how often is the within-subjects design significant when the between-subjects design isn’t? Is that pattern ever reversed?</p>
	</div>

	<center><button id="NextButton" style="width:12.5%;display:none">Continue</button></center>


</div>

<script>





var Q3Outcome = 'unanswered';
var datasets = 1;
var progress = {{progress}};
var LearnDiv = 0;
var pValues = {{pValues1}};
var sigTally = {{sigTally1}};
var sig = [0,0,0,0]

function KeepScore(){
	
	for(var i = 0; i < pList.length; i++){
		sig[i] += sigList[i]
	}

	$('#sigTrack1').html(sig[2]+'/'+datasets);
	$('#sigTrack2').html(sig[3]+'/'+datasets);
	$('#sigTrack3').html(sig[0]+'/'+datasets);
	$('#sigTrack4').html(sig[1]+'/'+datasets);
}

function LearnVisible(){
	if(LearnDiv == 0){
		LearnDiv += 1;
	}
	$('#DataGenerationExplanation').toggle();
}

function RecordQuiz3(){
	$('.pdiv').show();
	$('.sigTrack').show();
	KeepScore();
	
	Q3Outcome = $('input[name=q3]:checked', '#Q3Answers').val();
	if(Q3Outcome != 'A' & Q3Outcome != 'B'){
		alert('Please make a selection!');
		return
	
	}else if(Q3Outcome == 'A'){
		$('#AnswerA').show();

	}else if (Q3Outcome == 'B'){
		$('#AnswerB').show();
		
	}
	$('#Text1').hide();
	
	// Show response and next button
	$('#Text2, #NextButton').show();
	
	$('#NextButton').click(function(){
		
		// Hide quiz, answers
		$('#Text1, #Text2, #AnswerA, #AnswerB').hide();

		// Show second row and instructions, resample button
		$('#secondrow, #Text3, #ResampleButton').show();
		$('#firstrow').find('span').css('visibility', 'visible');

		// Next button: move on after simulations
		$('#NextButton').click(MySubmit);
		// $('#NextButton').css('display', 'inline-block');
	
	});
}

function ResampleFunction(){
	// Generate new data
	datasets += 1;
	console.log('Resampling!');

}


function MySubmit(){
	console.log('Submitting!');
	progress +=1;
	$('#Q3').val(Q3Outcome);
	$('#progressinput').val(String(progress));
	$('#numbersims').val(datasets);
	$('#dataform').submit();
}



/// Graph
// list of files
var FileList = ['/static/stimuli/WithinSubjects/data1.csv',  
	'/static/stimuli/WithinSubjects/data2.csv',  
	'/static/stimuli/WithinSubjects/data3.csv',  
	'/static/stimuli/WithinSubjects/data4.csv',  
	'/static/stimuli/WithinSubjects/data5.csv',  
	'/static/stimuli/WithinSubjects/data6.csv',  
	'/static/stimuli/WithinSubjects/data7.csv',  
	'/static/stimuli/WithinSubjects/data8.csv',  
	'/static/stimuli/WithinSubjects/data9.csv',  
	'/static/stimuli/WithinSubjects/data10.csv',  
	'/static/stimuli/WithinSubjects/data11.csv',  
	'/static/stimuli/WithinSubjects/data12.csv',  
	'/static/stimuli/WithinSubjects/data13.csv',  
	'/static/stimuli/WithinSubjects/data14.csv',  
	'/static/stimuli/WithinSubjects/data15.csv',  
	'/static/stimuli/WithinSubjects/data16.csv',  
	'/static/stimuli/WithinSubjects/data17.csv',  
	'/static/stimuli/WithinSubjects/data18.csv',  
	'/static/stimuli/WithinSubjects/data19.csv',  
	'/static/stimuli/WithinSubjects/data20.csv',  
	'/static/stimuli/WithinSubjects/data21.csv',  
	'/static/stimuli/WithinSubjects/data22.csv',  
	'/static/stimuli/WithinSubjects/data23.csv',  
	'/static/stimuli/WithinSubjects/data24.csv',  
	'/static/stimuli/WithinSubjects/data25.csv',  
	'/static/stimuli/WithinSubjects/data26.csv',  
	'/static/stimuli/WithinSubjects/data27.csv',  
	'/static/stimuli/WithinSubjects/data28.csv',  
	'/static/stimuli/WithinSubjects/data29.csv',  
	'/static/stimuli/WithinSubjects/data30.csv',  
	'/static/stimuli/WithinSubjects/data31.csv',  
	'/static/stimuli/WithinSubjects/data32.csv',  
	'/static/stimuli/WithinSubjects/data33.csv',  
	'/static/stimuli/WithinSubjects/data34.csv',  
	'/static/stimuli/WithinSubjects/data35.csv',  
	'/static/stimuli/WithinSubjects/data36.csv',  
	'/static/stimuli/WithinSubjects/data37.csv',  
	'/static/stimuli/WithinSubjects/data38.csv',  
	'/static/stimuli/WithinSubjects/data39.csv',  
	'/static/stimuli/WithinSubjects/data40.csv',  
	'/static/stimuli/WithinSubjects/data41.csv',  
	'/static/stimuli/WithinSubjects/data42.csv',  
	'/static/stimuli/WithinSubjects/data43.csv',  
	'/static/stimuli/WithinSubjects/data44.csv',  
	'/static/stimuli/WithinSubjects/data45.csv',  
	'/static/stimuli/WithinSubjects/data46.csv',  
	'/static/stimuli/WithinSubjects/data47.csv',  
	'/static/stimuli/WithinSubjects/data48.csv',  
	'/static/stimuli/WithinSubjects/data49.csv',  
	'/static/stimuli/WithinSubjects/data50.csv'];

var FileList2 = ['/static/stimuli/WithinSubjects/widedata1.csv',  
	'/static/stimuli/WithinSubjects/widedata2.csv',  
	'/static/stimuli/WithinSubjects/widedata3.csv',  
	'/static/stimuli/WithinSubjects/widedata4.csv',  
	'/static/stimuli/WithinSubjects/widedata5.csv',  
	'/static/stimuli/WithinSubjects/widedata6.csv',  
	'/static/stimuli/WithinSubjects/widedata7.csv',  
	'/static/stimuli/WithinSubjects/widedata8.csv',  
	'/static/stimuli/WithinSubjects/widedata9.csv',  
	'/static/stimuli/WithinSubjects/widedata10.csv',  
	'/static/stimuli/WithinSubjects/widedata11.csv',  
	'/static/stimuli/WithinSubjects/widedata12.csv',  
	'/static/stimuli/WithinSubjects/widedata13.csv',  
	'/static/stimuli/WithinSubjects/widedata14.csv',  
	'/static/stimuli/WithinSubjects/widedata15.csv',  
	'/static/stimuli/WithinSubjects/widedata16.csv',  
	'/static/stimuli/WithinSubjects/widedata17.csv',  
	'/static/stimuli/WithinSubjects/widedata18.csv',  
	'/static/stimuli/WithinSubjects/widedata19.csv',  
	'/static/stimuli/WithinSubjects/widedata20.csv',  
	'/static/stimuli/WithinSubjects/widedata21.csv',  
	'/static/stimuli/WithinSubjects/widedata22.csv',  
	'/static/stimuli/WithinSubjects/widedata23.csv',  
	'/static/stimuli/WithinSubjects/widedata24.csv',  
	'/static/stimuli/WithinSubjects/widedata25.csv',  
	'/static/stimuli/WithinSubjects/widedata26.csv',  
	'/static/stimuli/WithinSubjects/widedata27.csv',  
	'/static/stimuli/WithinSubjects/widedata28.csv',  
	'/static/stimuli/WithinSubjects/widedata29.csv',  
	'/static/stimuli/WithinSubjects/widedata30.csv',  
	'/static/stimuli/WithinSubjects/widedata31.csv',  
	'/static/stimuli/WithinSubjects/widedata32.csv',  
	'/static/stimuli/WithinSubjects/widedata33.csv',  
	'/static/stimuli/WithinSubjects/widedata34.csv',  
	'/static/stimuli/WithinSubjects/widedata35.csv',  
	'/static/stimuli/WithinSubjects/widedata36.csv',  
	'/static/stimuli/WithinSubjects/widedata37.csv',  
	'/static/stimuli/WithinSubjects/widedata38.csv',  
	'/static/stimuli/WithinSubjects/widedata39.csv',  
	'/static/stimuli/WithinSubjects/widedata40.csv',  
	'/static/stimuli/WithinSubjects/widedata41.csv',  
	'/static/stimuli/WithinSubjects/widedata42.csv',  
	'/static/stimuli/WithinSubjects/widedata43.csv',  
	'/static/stimuli/WithinSubjects/widedata44.csv',  
	'/static/stimuli/WithinSubjects/widedata45.csv',  
	'/static/stimuli/WithinSubjects/widedata46.csv',  
	'/static/stimuli/WithinSubjects/widedata47.csv',  
	'/static/stimuli/WithinSubjects/widedata48.csv',  
	'/static/stimuli/WithinSubjects/widedata49.csv',  
	'/static/stimuli/WithinSubjects/widedata50.csv']


// Randomly select a file from the list
// var random = Math.floor(Math.random() * FileList.length);
var random = 37;
var File = FileList[random];
var File2 = FileList2[random];
var pList = pValues[random];
var sigList = sigTally[random];

$('#p1').html(pList[2]);
$('#p2').html(pList[3]);
$('#p3').html(pList[0]);
$('#p4').html(pList[1]);

/// Name variables here
var	yLabel = "Weight",
	condLabel = "Exercise routine",
	xMax = 20,
	yMax = 250;
	

/// Variables for calculating stuff
var parsedData;
var iv = [];
var iv2 = [];
var dv = [];
var dvb = [];
var wdv = [];
var wdvb = [];
var meanVeggieBetween = [];
var meanFruitBetween = [];
var meanVeggieWithin = [];
var meanFruitWithin = [];
var meanWideFruitBetween = [];
var meanWideVeggieBetween = [];
var meanWideFruitWithin = [];
var meanWideVeggieWithin = [];


/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}


var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 300 - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([100,yMax]);


var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Veggie","Fruit"]);

var color = d3.scale.category10()
    .domain(["Veggie","Fruit"]);

var xAxis = d3.svg.axis()
    .scale(cond)
    .orient("bottom")
    // .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");


// I created these out of order (oops!). Since they take in different datasets with different column names, it was easier to change where they're appended instead of changing the charts themselves.
var chart1 = d3.select("#graph3").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart2 = d3.select("#graph4").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart3 = d3.select("#graph1").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart4 = d3.select("#graph2").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// var line = d3.chart1.line()
// 	.interpolate("basis")
//     .x(function(d) { return x(d.t); })
//     .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

// var lineBlockerAttr = new Object();
// 	lineBlockerAttr.x=width/3;
// 	lineBlockerAttr.y=0;

// var pointBlockerAttr = new Object();
// 	pointBlockerAttr.x=width/2;
// 	pointBlockerAttr.y=0;

// Reads data from .csv file

// for between-subjects

// CHART 1
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      dvb.push(Number(parsedData[i].dvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieBetween.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitBetween.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.dvb = +d.dvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanBetween = chart1.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanVeggieBetween)))
      .attr("y2", y(d3.mean(meanVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanBetween = chart1.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanFruitBetween)))
      .attr("y2", y(d3.mean(meanFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart1.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition) ; })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart1.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart1.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", "-5em")
    // 	// .attr("dx", "1em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart1.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });



});

// CHART 2

// for within-subjects
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
	console.log(parsedData.length);
    for (i = 0; i < 20; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      dvb.push(Number(parsedData[i].dvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////


  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.dvb = +d.dvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});



  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanFruitWithin)))
    //   .attr("y2", y(d3.mean(meanFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points



    // trying to draw lines.....
    

	// var lines = chart2.selectAll("line")
	// 	.data(parsedData)
	// 	.enter()
	// 		.append("line")
	// 		.attr("x1", cond(5))
	// 		.attr("x2", cond(15))
	// 		.attr("y1", y(parsedData.dv))
	// 		.attr("y2", y(parsedData.dv))
	// 		.attr("stroke", "black");
	

	var line = chart2.selectAll("line")
		.data(data)
		.enter().append("line")
			.filter(function(d) { return d.condition == 'Veggie' })
				.attr("x1", cond("Veggie"))
				.attr("x2", cond("Fruit"))
				.attr("y1", function(d) { return y(d.dv); })
				.attr("y2", function(d) { return y(d.dvb); })
				.attr("stroke", "black");

	chart2.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);
	

    // Appends axes

  	chart2.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart2.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

   //  // Appends legend

  	// var legend = chart2.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 3
d3.csv(File2, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].wdv));
      dvb.push(Number(parsedData[i].wdvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanWideVeggieBetween.push(Number(parsedData[i].wdv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanWideFruitBetween.push(Number(parsedData[i].wdv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.dvb = +d.dvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanWithin = chart3.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanWithin = chart3.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanWideFruitBetween)))
      .attr("y2", y(d3.mean(meanWideFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart3.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.wdv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart3.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart3.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart3.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 4
d3.csv(File2, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
	console.log(parsedData.length);
    for (i = 0; i < 20; i++) {
      iv.push(Number(parsedData[i].iv));
      wdv.push(Number(parsedData[i].wdv));
      wdvb.push(Number(parsedData[i].wdvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.wdv = +d.wdv;
    	d.wdvb = +d.wdvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points
	var line = chart4.selectAll("line")
		.data(data)
		.enter().append("line")
			.filter(function(d) { return d.condition == 'Veggie' })
				.attr("x1", cond("Veggie"))
				.attr("x2", cond("Fruit"))
				.attr("y1", function(d) { return y(d.wdv); })
				.attr("y2", function(d) { return y(d.wdvb); })
				.attr("stroke", "black");

  	chart4.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.wdv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart4.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart4.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart4.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});





function UpdateData(){
	datasets += 1;

	$('#graph1').html('');
	meanFruitBetween = [];
	meanVeggieBetween = [];

	$('#graph2').html('');
	meanFruitWithin = [];
	meanVeggieWithin = [];

	$('#graph3').html('');
	meanWideFruitBetween = [];
	meanWideVeggieBetween = [];

	$('#graph4').html('');
	meanWideFruitWithin = [];
	meanWideVeggieWithin = [];


	// randomly select a datafile

	random = Math.floor(Math.random() * FileList.length);

	// var random = Math.floor(Math.random() * FileList.length);
	File = FileList[random];
	File2 = FileList2[random];
	pList = pValues[random];
	sigList = sigTally[random];

	$('#p1').html(pList[2]);
	$('#p2').html(pList[3]);
	$('#p3').html(pList[0]);
	$('#p4').html(pList[1]);

	KeepScore();

	var chart1 = d3.select("#graph3").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart2 = d3.select("#graph4").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart3 = d3.select("#graph1").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart4 = d3.select("#graph2").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	// CHART 1
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      dvb.push(Number(parsedData[i].dvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieBetween.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitBetween.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.dv = +d.dv;
	    	d.dvb = +d.dvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanBetween = chart1.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanVeggieBetween)))
	      .attr("y2", y(d3.mean(meanVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanBetween = chart1.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanFruitBetween)))
	      .attr("y2", y(d3.mean(meanFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart1.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) ; })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart1.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart1.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart1.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });



	});

	// CHART 2

	// for within-subjects
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      dvb.push(Number(parsedData[i].dvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.dv = +d.dv;
	    	d.dvb = +d.dvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanFruitWithin)))
	    //   .attr("stroke", color("Fruit"));

	    // Appends points

    	var line = chart2.selectAll("line")
			.data(data)
			.enter().append("line")
				.filter(function(d) { return d.condition == 'Veggie' })
					.attr("x1", cond("Veggie"))
					.attr("x2", cond("Fruit"))
					.attr("y1", function(d) { return y(d.dv); })
					.attr("y2", function(d) { return y(d.dvb); })
					.attr("stroke", "black");

	  	chart2.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart2.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart2.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart2.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 3
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].wdv));
	      dvb.push(Number(parsedData[i].wdvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanWideVeggieBetween.push(Number(parsedData[i].wdv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanWideFruitBetween.push(Number(parsedData[i].wdv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.dv = +d.dv;
	    	d.dvb = +d.dvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanWithin = chart3.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
	      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanWithin = chart3.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanWideFruitBetween)))
	      .attr("y2", y(d3.mean(meanWideFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart3.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.wdv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart3.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart3.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart3.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 4
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
		console.log(parsedData.length);
	    for (i = 0; i < 20; i++) {
	      iv.push(Number(parsedData[i].iv));
	      wdv.push(Number(parsedData[i].wdv));
	      wdvb.push(Number(parsedData[i].wdvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.wdv = +d.wdv;
	    	d.wdvb = +d.wdvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("stroke", color("Fruit"));

	    // Appends points
		var line = chart4.selectAll("line")
			.data(data)
			.enter().append("line")
				.filter(function(d) { return d.condition == 'Veggie' })
					.attr("x1", cond("Veggie"))
					.attr("x2", cond("Fruit"))
					.attr("y1", function(d) { return y(d.wdv); })
					.attr("y2", function(d) { return y(d.wdvb); })
					.attr("stroke", "black");

	  	chart4.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.wdv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart4.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart4.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart4.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});
}
</script>

{% endblock %}