{% extends "_base.htm" %}
{% block title %}
	Fatigue effects
{% endblock%}

{% block bodycontent %}

<script type="text/javascript">

/// Overall tutorial progress
var progress = {{progress}};

/// Checkpoint for page
var current = 0;

/// Graph
var file = "/static/stimuli/OrderEffects/practice2.csv";

/// Name variables here
var	yLabel = "Puzzle score",
		condLabel = "Exercise routine",
		xLabel = "Time (minutes)",
		covariate = "Concentration"
		xMax = 65,
		yMax = 16;

/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var measure = [];
var meanCond1 = [];
var meanCond2 = [];
var meanCond3 = [];

/// Text

  var text = [
    "Letâ€™s imagine that we repeat the experiment with new participants. This time, all the participants are given practice and training in the puzzle for about 30 minutes before they begin the experiment. This ensures that their skill levels are high and stable enough that the practice effects we just learned about are not a problem. As you can see, their <font color='red'>skill</font> levels are at a constantly high level - we don't expect them to decrease within the time it takes to complete the experiment.",

    "Based on our findings in the previous experiment, we would expect that in the <i>Relaxing Music</i> condition, participants' scores would be generally above the <font color='red'>red line</font> due to the boost it offers in performance by countering anxiety. This is what we find - so far so good! Next, we expect scores in the control condition to be arount the <font color='red'>red line</font>.",

    "As expected, the scores in the control condition are roughly around (or slightly lower than) the <font color='red'>red line</font>. In this condition, participants sit around and wait before doing the puzzle. This doesn't have the same calming effect of the other two conditions, so there is no 'boost' given to their performance. If some anxiety creeps in for some participants, they should perform below their skill level a little.<br><br>Finally, we expect scores in the <i>Meditation</i> condition to be above the <font color='red'>red line</font> due to the boost meditation offers in performance by countering anxiety (just like the <i>Relaxing Music</i> condition). Let's see how participants perform in this condition...",

    "As you probably guessed from how this demonstration has gone, we find something unexpected. Participants in the <i>Meditation</i> condition do worse than those in the other two conditions. These scores are below the <font color='red'>red line</font>, meaning that these scores are below what we expect based on participants' skill levels. Instead of giving a boost to performance, something about this condition seems to be hurting performance.",

    "Let's consider that in this version of the experiment, participants first get practice with several puzzles for 30 minutes before they experience the first condition. This was done to ensure their <font color='red'>skill</font> levels were at ceiling. However, it is possible that by the time they begin the first condition and do the proper puzzle the first time, they start to get a little tired or bored. If they aren't concentrating as much, it's likely they won't perform as well on the test. Let's look at how their average concentration levels change over the course of the experiment (indicated by a <font color='grey'>dashed gray line</font>).",

    "At the start of the experiment, participants' <font color='grey'>concentration</font> levels are still pretty high. But at this point, they've already been in the lab for more than 30 minutes from the training, and are probably getting a little tired, bored or distracted. Because of this, we see their <font color='grey'>concentration</font> levels starting to decrease gradually after finishing the first condition. Imagine participants wondering, 'How many puzzles am I going to have to do?'",

    "Their <font color='grey'>concentration</font> levels decrease gradually over the course of the experiment. By the time they get to the final <i>Meditation</i> condition, they are potentially not taking the experiment very seriously anymore (they are probably just eager to finish it and leave). If performance in this puzzle is determined not just by <font color='red'>skill</font>, but also by the level of <font color='grey'>concentration</font>, it makes sense that in later conditions, participants perform worse than their skill levels (and the boost offered by the experimental conditions) allow them to.",

    "This is called a <b>fatigue effect</b>, when increasing time spent in an experiment decreases a participant's performance due to them becoming fatigued. In this case, this was due to their decreasing <font color='grey'>concentration</font> levels, which implies they had difficulty focusing and paying attention. However, this can also happen due to physical tiredness (if the experiment involves physical tasks) or factors like motivation. One way to think of it is that it's what happens when the 'resources' a participant needs for an experiment gets depleted.",

    "There are several things researchers can do to safeguard against this, but it depends on the nature of the <b>fatigue effect</b> you are expecting will be a problem. If the problem is decreasing motivation, then building incentives into the experiment (e.g. a reward based on scores) might work. If the problem is decreasing concentration or energy, then the experimental procedures need to be carefully planned to minimize this (e.g. giving breaks between conditions, designing the experiment to be as short as possible). Researchers should always consider the experience and perspectives of participants, to design experiments that minimize these effects. A good rule of thumb is that researchers should always try out the experimental procedures on themselves first."
    ]

/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}

/// Function to move text forward and back within page

function next(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current<text.length-1) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==1) {
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { 
      svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==3) { 
      svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 0); 
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 1);
    }    
    else if (current==4) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 1);
      svg.select("#legendLine").transition().duration(800).delay(0).style("opacity", 1);
      svg.select("#legendText").transition().duration(800).delay(0).style("opacity", 1); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==5) { svg.select("path").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==6) { 
      svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 0); 
      svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==text.length-1) { 
      $("#next").attr("disabled", true);
      showQuiz(); 
    }
  
}

function previous(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current>0) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==5) { 
      svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 1); 
      svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==4) { svg.select("path").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 0);
      svg.select("#legendLine").transition().duration(800).delay(0).style("opacity", 0);
      svg.select("#legendText").transition().duration(800).delay(0).style("opacity", 0);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { 
      svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 1); 
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==1) { 
      svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 0);
    } 
    else if (current==0) { 
      $("#previous").attr("disabled", true); 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
    }
}

/// Enables next button
function enable() {
  $('#answer').attr('disabled', false);
}

/// Function to show quiz

function showQuiz() {
  $('#continue').hide();
  $('#submit').show();
}

/// Shows quiz answer

function answerQuiz2() {

  Q2Outcome = $('input[name=q2]:checked', '#Quiz2').val();

  $('#answer').hide()
  $('#optionA, #optionB').css('opacity', '0.5');
  $('#q2a, #q2b').attr('disabled', true);
  $('#A2').show();
  $('#submit').show();

  $('#A2').html("<b>Correct answer: FALSE!</b><br>In this experiment, we used a puzzle where one\'s performance was significantly determined by skill, and where skill was greatly helped by practice. While a within-subjects design will always expose participants to more experience and \'practice\' that may affect later performance, these effects are sometimes minimal and have no significant impact on the conclusions of your study.<br><br>There are several cases where it will not be a problem. First, if you are testing a psychological characteristic where skill is not a factor (e.g. personality tests). In this case, experiencing a test multiple times would not provide 'practice' that would change performance.<br><br>Secondly, if you expect participants to already be at their maximum skill levels (i.e. at ceiling) when starting the experiment, then practice would not be able to improve their performance any more. Recall from the graph above that practice has the greatest effect when the skill level is initially low. One precautionary step researchers sometimes take is to give training in a test before participants start the experiment, so that their skill levels are already at ceiling at the start of the experiment.");
}

/// Submit function

function MySubmit(){
  console.log('Submit dat!');
  // $('#Q2').val(Q2Outcome);
  progress += 1;
  $('#progressinput').val(progress);
  $('#myForm').submit();
}

</script>

<div class="logout"><a href="/logout.htm">Logout</a></div>

<div class="pg" style="height:940px">

	<h2><center>Fatigue effects</center></h2>
	
	<br>
  
  <div id="text" style="display:show; height:120px" align="justify">
    <script>document.write(text[current])</script>
  </div>

  <div id="progress" style="display:show; height:10px; font-size:12px;" align="right">
    <i>Page <script>document.write(current+1)</script> of 9</i>
  </div>

  <br>

  <div align="right">
    <button id="previous" onclick="current--; previous(current)" disabled="true">&larr; Previous</button>&nbsp;&nbsp;<button id="next" onclick="current++; next(current);">Next &rarr;</button>
  </div>

	<div id="graph" width="900" height="600" align="center"></div>

  <br>

	<div id="quiz" width="900" style="display:none">

    <p><b>TRUE OR FALSE?</b> Practice effects will always be a problem when using within-subjects designs.</p>

    <form id="Quiz2" style="position:relative;left:20px">
      <input type="radio" value="A" name="q2" id="q2a" onchange="enable();"><label for="q2a"><span id="optionA">&nbspTrue</span></label>&nbsp&nbsp&nbsp&nbsp&nbsp
      <input type="radio" value="B" name="q2" id="q2b" onchange="enable();"><label for="q2b"><span id="optionB">&nbspFalse</span></label><br>
    </form><br>

    <center><button id="answer" onclick="answerQuiz2()" disabled="true">Check answer</button></center>

    <div id="A2" style="display:none"></div>

  </div>

  <br>

  <center>
    <form id="myForm" method="post" action="/PracticeFatigueEffects">
      <input type="submit" id="submit" onclick="MySubmit()" value="Continue" style="display:none"/>
      <!-- <input type="hidden" id="Q2" name="Q2" value=""> -->
      <input type="hidden" id="progressinput" name="progressinput" value="">
    </form>
  </center>

</div>

<style>

	body {
	  font: 14px sans-serif;
	}

	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}

	.dot {
	  stroke: #000;
	}

	path { 
	    stroke: steelblue;
	    stroke-width: 2;
	    fill: none;
	}

</style>

<script type="text/javascript">

// Sets dimensions of graph and axes

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 800 - margin.left - margin.right,
    height = 350 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Relaxing music","Control","Meditation"]);

var color = d3.scale.category10()
    .domain(["Relaxing music","Control","Meditation"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/10);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line = d3.svg.line()
	.interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr = new Object();
	lineBlockerAttr.x=width/3;
	lineBlockerAttr.y=0;

var pointBlockerAttr = new Object();
	pointBlockerAttr.x=width/2;
	pointBlockerAttr.y=0;

// Reads data from .csv file

d3.csv(file, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
    console.log(parsedData.length);
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Relaxing music") {
        meanCond1.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Control") {
        meanCond2.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Meditation") {
        meanCond3.push(Number(parsedData[i].dv));
      }

    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.t = +d.t;
      d.condition = d.condition;
  	});

  	// x.domain(d3.extent(data, function(d) { return d.A; })).nice();
  	// y.domain(d3.extent(data, function(d) { return d.B; })).nice();
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax])

    // Appends line

    svg.append("path")
    	.attr("class", "line")
    	.style("stroke", "grey")
    	.style("stroke-dasharray", "10, 5")
    	.style("opacity", 0)
      .attr("d", line(data));

    // Append line blocker

  	var lineBlocker1 = svg.append("rect")
  		.attr("id", "lineBlocker1")
      .attr("width", width/3)
  		.attr("height", height)
  		.attr("x", x(20))
  		.attr("y", 0)
  		.style("fill", "white")
  		.style("opacity", 1);

    var lineBlocker2 = svg.append("rect")
      .attr("id", "lineBlocker2")
      .attr("width", width/3)
      .attr("height", height)
      .attr("x", x(40))
      .attr("y", 0)
      .style("fill", "white")
      .style("opacity", 1);

    // Appends means

    var Mean1 = svg.append("line")
      .attr("id", "Mean1")
      .attr("x1", cond("Relaxing music")-x(2))
      .attr("x2", cond("Relaxing music")+x(2))
      .attr("y1", y(d3.mean(meanCond1)))
      .attr("y2", y(d3.mean(meanCond1)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color("Relaxing music"));

    var M1 = svg.append("text")
        .attr("id", "M1")
        .attr("x", cond("Relaxing music")-x(1.2))
        .attr("y", y(d3.mean(meanCond1)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond1).toFixed(2));

    var Mean2 = svg.append("line")
      .attr("id", "Mean2")
      .attr("x1", cond("Control")-x(2))
      .attr("x2", cond("Control")+x(2))
      .attr("y1", y(d3.mean(meanCond2)))
      .attr("y2", y(d3.mean(meanCond2)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color("Control"));

    var M2 = svg.append("text")
        .attr("id", "M2")
        .attr("x", cond("Control")-x(1.2))
        .attr("y", y(d3.mean(meanCond2)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond2).toFixed(2));

    var Mean3 = svg.append("line")
      .attr("id", "Mean3")
      .attr("x1", cond("Meditation")-x(2))
      .attr("x2", cond("Meditation")+x(2))
      .attr("y1", y(d3.mean(meanCond3)))
      .attr("y2", y(d3.mean(meanCond3)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color("Meditation"));

    var M3 = svg.append("text")
        .attr("id", "M3")
        .attr("x", cond("Meditation")-x(1.2))
        .attr("y", y(d3.mean(meanCond3)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond3).toFixed(2));

    // Appends points

  	svg.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	//.attr("cx", function(d) { return x(d.iv); })
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 0);

    // Append point blocker

    var pointBlocker1 = svg.append("rect")
		.attr("id", "pointBlocker1")
    .attr("width", width/3)
		.attr("height", height)
		.attr("x", x(20))
		.attr("y", 0)
		.style("fill", "white")
		.style("opacity", 1);

    var pointBlocker2 = svg.append("rect")
    .attr("id", "pointBlocker2")
    .attr("width", width/3)
    .attr("height", height)
    .attr("x", x(40))
    .attr("y", 0)
    .style("fill", "white")
    .style("opacity", 1);

    // Appends axes

  	svg.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)
    .append("text")
    	.attr("class", "label")
    	.attr("x", width)
    	.attr("y", -6)
    	.style("text-anchor", "end")
    	.text(xLabel);

  	svg.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	.append("text")
    	.attr("class", "label")
    	.attr("transform", "rotate(-90)")
    	.attr("y", 6)
    	.attr("dy", ".71em")
    	.style("text-anchor", "end")
    	.text(yLabel);

    svg.append("text")
        // .attr("x", cond("Control"))
        .attr("x", cond("Relaxing music"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Relaxing music");

    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Control"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Control");

    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Meditation"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Meditation");

    // Appends legend

  	var legend = svg.selectAll(".legend")
      	.data(color.domain())
    .enter().append("g")
      	.attr("class", "legend")
      	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	legend.append("rect")
      	.attr("x", width - 18)
      	.attr("width", 18)
      	.attr("height", 18)
      	.style("fill", color);

  	legend.append("text")
      	.attr("x", width - 24)
      	.attr("y", 9)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text(function(d) { return d; });

    svg.append("rect")
    	.attr("x", width - 18)
    	.attr("y", 68)
      	.attr("width", 18)
      	.attr("height", 2)
      	.style("fill", "red");

    svg.append("text")
      	.attr("x", width - 24)
      	.attr("y", 68)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text("Skill");

    var legendBlocker = svg.append("rect")
      .attr("id", "legendBlocker")
      .attr("width", 115)
      .attr("height", 20)
      .attr("x", width - 115)
      .attr("y", 60)
      .style("fill", "white")
      .style("opacity", 0);

    svg.append("rect")
      .attr("id", "legendLine")
      .attr("x", width - 18)
      .attr("y", 68)
        .attr("width", 18)
        .attr("height", 2)
        .style("fill", "grey")
        .style("opacity", 0);

    svg.append("text")
        .attr("id", "legendText")
        .attr("x", width - 24)
        .attr("y", 68)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .style("opacity", 0)
        .text(covariate);

    // Appends constant line for 'skill'

    svg.append("line")
      .attr("id", "skill")
      .attr("class", "line")
      .style("stroke", "red")
      .style("stroke-width", 1.5)
      .style("opacity", 1)
      .attr("x1", x(1))
      .attr("y1", y(10))
      .attr("x2", x(60))
      .attr("y2", y(10));

});

</script>

{% endblock %}
