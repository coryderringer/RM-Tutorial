{% extends "_base.htm" %}
{% block title %}
	Practice effects
{% endblock%}

{% block bodycontent %}

<script type="text/javascript">

/// Overall tutorial progress
var progress = {{progress}};

/// Checkpoint for page
var current = 0;

/// Graph
var file = "/static/stimuli/OrderEffects/practice1.csv";

/// Name variables here
var	yLabel = "Test score",
		condLabel = "Exercise routine",
		xLabel = "Time (minutes)",
		covariate = "Skill"
		xMax = 60,
		yMax = 16;

/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var measure = [];
var meanCond1 = [];
var meanCond2 = [];
var meanCond3 = [];

/// Text

  var text = [
    "Let’s look at the results for the experiment. On this graph, the x-axis shows the time elapsed in the experiment. We have randomized the order that the conditions get experienced in. Each condition involves a different activity lasting about 10 minutes prior to the test, which then takes about 5 minutes to complete. Each time, the test has different questions, but they all measure the same intellectual abilities. After completing the test, participants continue with the next condition. The y-axis represents their test scores.",

    "Participants first listen to a relaxing song of their own choice using headphones and then try the test. We expect this condition to lower their anxiety, which will hopefully allow them to do better on the test. Each blue point represents the score of a single participant collected in this condition. As you can see, the average test score seems pretty low. But we need to see how this compares to the other conditions. Next up is the control condition, in which the subjects should do worse on the test because their anxiety levels should be higher. Let's see how well they do in the control condition!",

    "That's strange! We expected participants to score lower in the control condition because they aren't engaged in an anxiety-reducing activity prior to the test, but they actually score higher in this condition! Let's see how they do in the next condition, when they engage in meditation prior to doing the test.",

    "The scores in this condition are as we expected. But how can we explain why people score so poorly in the condition where they listen to relaxing music? Our prior research suggests that this should help decrease anxiety, so their test scores here be as high as in the meditation condition (or at least higher than the control condition).",

    "Let's consider that participants do the test 3 times during the experiment. Even though the specific questions they answer each time are different, there are similarities because they measure the same intellectual ability. Our 'Skill' at a task often increases the more times we do it, due to the practice offered by repetition. Let look at the average skill levels of participants as they go through the experiment (imagine we have some device that shows you this in real-time).",

    "After the first condition and their first round trying out the test, their 'Skill' in the test increases. It turns out on this test, familiarizing yourslf with the test format and the type of questions goes a long way towards helping your ability to do it. Because participants start out with a low 'Skill' level, it's not surprising their scores in the first condition are lower. Let's see what happens with their ability after their second time doing the test!",

    "More practice results in greater 'Skill'!",

    "And by the last condition, participants have gotten even more practice, raising their 'Skill' further. We can note that relative to the skill level at each tim",

    "In general terms, this is called an order effect, where exposure to one condition changes a participant’s responses to a later condition. More specifically, this is an example of a <b>carryover effect</b>, <i>a type of order effect where experiencing one condition changes the subjects' experience of a later condition</i>. This is a serious threat to internal validity in within-subjects designs because it could mean a particular condition is not manipulating the mechanisms you are interested in (in this case, arousal) the way you intend."
    ]

/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}

/// Function to move text forward and back within page

function next(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current<text.length-1) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==1) { 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 0); }    
    else if (current==4) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 0); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==5) { svg.select("path").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==6) { svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==7) { svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==text.length-1) { 
      $("#next").attr("disabled", true);
      showQuiz(); 
    }
  
}

function previous(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current>0) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==6) { svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==5) { svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==4) { svg.select("path").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 1); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==1) { svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 1); } 
    else if (current==0) { 
      $("#previous").attr("disabled", true); 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
    }
}

/// Enables next button
function enable() {
  $('#answer').attr('disabled', false);
}

/// Function to show quiz

function showQuiz() {
  $('#continue').hide();
  $('#quiz').show();
}

/// Shows quiz answer

function answerQuiz2() {

  Q2Outcome = $('input[name=q2]:checked', '#Quiz2').val();

  $('#answer').hide()
  $('#optionA, #optionB').css('opacity', '0.5');
  $('#q2a, #q2b').attr('disabled', true);
  $('#A2').show();
  $('#submit').show();

  $('#A2').html('<b>Actually, they\'re both valid ways!</b><br>If you used a between-subjects design, different groups of participants would experience the different conditions and each manipulation would not be able to contaminate the other. However, the usual drawbacks of this design still apply, and researchers generally look for other ways of dealing with carryover effects instead of always reverting to a between-subjects design.<br><br>If we want to stick with the within-subjects design, we could increase the time between the conditions so that arousal in the experimental condition has time to decay. However, we do not always know how long it takes for participants to return to normal on some important characteristic (in this case, because we measure their arousal with a heart-rate monitor, we have that information. Let\'s see what happens if we repeat this experiment, but this time stretching it out over a longer period of time.');
}

/// Submit function

function MySubmit(){
  console.log('Submit dat!');
  $('#Q2').val(Q2Outcome);
  progress += 1;
  $('#progressinput').val(progress);
  $('#myForm').submit();
}

</script>

<div class="pg" style="height:940px">

	<h2><center>Practice effects</center></h2>
	
	<br>
  
  <div id="text" style="display:show; height:100px" align="justify">
    <script>document.write(text[current])</script>
  </div>

  <div id="progress" style="display:show; height:10px; font-size:12px;" align="right">
    <i>Page <script>document.write(current+1)</script> of 9</i>
  </div>

  <br>

  <div align="right">
    <button id="previous" onclick="current--; previous(current)" disabled="true">&larr; Previous</button>&nbsp;&nbsp;<button id="next" onclick="current++; next(current);">Next &rarr;</button>
  </div>

	<div id="graph" width="900" height="600" align="center"></div>

  <br>

	<div id="quiz" width="900" style="display:none">

    <p><b>Which of the following ways is preferable for dealing with carryover effects?</b></p>

    <form id="Quiz2" style="position:relative;left:20px">
      <input type="radio" value="A" name="q2" id="q2a" onchange="enable();"><label for="q2a"><span id="optionA">&nbspUse a between-subjects design</span></label><br>
      <input type="radio" value="B" name="q2" id="q2b" onchange="enable();"><label for="q2b"><span id="optionB">&nbspIncrease the time between the experimental and control conditions so that arousal has time to decay</span></label><br>
    </form><br>

    <center><button id="answer" onclick="answerQuiz2()" disabled="true">Check answer</button></center>

    <div id="A2" style="display:none"></div>

  </div>

  <br>

  <center>
    <form id="myForm" method="post" action="/CarryoverEffects">
      <input type="submit" id="submit" onclick="MySubmit()" value="Continue" style="display:none"/>
      <input type="hidden" id="Q2" name="Q2" value="">
      <input type="hidden" id="progressinput" name="progressinput" value="">
    </form>
  </center>

  <br>

	<center>Or <a href="/logout">Logout.</a></center>

</div>

<style>

	body {
	  font: 14px sans-serif;
	}

	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}

	.dot {
	  stroke: #000;
	}

	path { 
	    stroke: steelblue;
	    stroke-width: 2;
	    fill: none;
	}

</style>

<script type="text/javascript">

// Sets dimensions of graph and axes

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 800 - margin.left - margin.right,
    height = 350 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Relaxing music","Control","Meditation"]);

var color = d3.scale.category10()
    .domain(["Relaxing music","Control","Meditation"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/10);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line = d3.svg.line()
	.interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr = new Object();
	lineBlockerAttr.x=width/3;
	lineBlockerAttr.y=0;

var pointBlockerAttr = new Object();
	pointBlockerAttr.x=width/2;
	pointBlockerAttr.y=0;

// Reads data from .csv file

d3.csv(file, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
    console.log(parsedData.length);
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Relaxing music") {
        meanCond1.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Control") {
        meanCond2.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Meditation") {
        meanCond3.push(Number(parsedData[i].dv));
      }

    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.t = +d.t;
      d.condition = d.condition;
  	});

  	// x.domain(d3.extent(data, function(d) { return d.A; })).nice();
  	// y.domain(d3.extent(data, function(d) { return d.B; })).nice();
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax])

    // Appends line

    svg.append("path")
    	.attr("class", "line")
    	.style("stroke", "red")
    	//.style("stroke-dasharray", "10, 5")
    	.style("opacity", 0)
      .attr("d", line(data));

    // Append line blocker

  	var lineBlocker1 = svg.append("rect")
  		.attr("id", "lineBlocker1")
      .attr("width", width/3)
  		.attr("height", height)
  		.attr("x", x(20))
  		.attr("y", 0)
  		.style("fill", "white")
  		.style("opacity", 1);

    var lineBlocker2 = svg.append("rect")
      .attr("id", "lineBlocker2")
      .attr("width", width/3)
      .attr("height", height)
      .attr("x", x(40))
      .attr("y", 0)
      .style("fill", "white")
      .style("opacity", 1);

    // Appends means

    var Mean1 = svg.append("line")
      .attr("id", "Mean1")
      .attr("x1", cond("Relaxing music")-x(2))
      .attr("x2", cond("Relaxing music")+x(2))
      .attr("y1", y(d3.mean(meanCond1)))
      .attr("y2", y(d3.mean(meanCond1)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color("Relaxing music"));

    var M1 = svg.append("text")
        .attr("id", "M1")
        .attr("x", cond("Relaxing music")-x(1.2))
        .attr("y", y(d3.mean(meanCond1)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond1).toFixed(2));

    var Mean2 = svg.append("line")
      .attr("id", "Mean2")
      .attr("x1", cond("Control")-x(2))
      .attr("x2", cond("Control")+x(2))
      .attr("y1", y(d3.mean(meanCond2)))
      .attr("y2", y(d3.mean(meanCond2)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color("Control"));

    var M2 = svg.append("text")
        .attr("id", "M2")
        .attr("x", cond("Control")-x(1.2))
        .attr("y", y(d3.mean(meanCond2)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond2).toFixed(2));

    var Mean3 = svg.append("line")
      .attr("id", "Mean3")
      .attr("x1", cond("Meditation")-x(2))
      .attr("x2", cond("Meditation")+x(2))
      .attr("y1", y(d3.mean(meanCond3)))
      .attr("y2", y(d3.mean(meanCond3)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color("Meditation"));

    var M3 = svg.append("text")
        .attr("id", "M3")
        .attr("x", cond("Meditation")-x(1.2))
        .attr("y", y(d3.mean(meanCond3)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond3).toFixed(2));

    // Appends points

  	svg.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	//.attr("cx", function(d) { return x(d.iv); })
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 0);

    // Append point blocker

    var pointBlocker1 = svg.append("rect")
		.attr("id", "pointBlocker1")
    .attr("width", width/3)
		.attr("height", height)
		.attr("x", x(20))
		.attr("y", 0)
		.style("fill", "white")
		.style("opacity", 1);

    var pointBlocker2 = svg.append("rect")
    .attr("id", "pointBlocker2")
    .attr("width", width/3)
    .attr("height", height)
    .attr("x", x(40))
    .attr("y", 0)
    .style("fill", "white")
    .style("opacity", 1);

    // Appends axes

  	svg.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)
    .append("text")
    	.attr("class", "label")
    	.attr("x", width)
    	.attr("y", -6)
    	.style("text-anchor", "end")
    	.text(xLabel);

  	svg.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	.append("text")
    	.attr("class", "label")
    	.attr("transform", "rotate(-90)")
    	.attr("y", 6)
    	.attr("dy", ".71em")
    	.style("text-anchor", "end")
    	.text(yLabel);

    svg.append("text")
        // .attr("x", cond("Control"))
        .attr("x", cond("Relaxing music"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Relaxing music");

    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Control"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Control");

    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Meditation"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Meditation");

    // Appends legend

  	var legend = svg.selectAll(".legend")
      	.data(color.domain())
    .enter().append("g")
      	.attr("class", "legend")
      	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	legend.append("rect")
      	.attr("x", width - 18)
      	.attr("width", 18)
      	.attr("height", 18)
      	.style("fill", color);

  	legend.append("text")
      	.attr("x", width - 24)
      	.attr("y", 9)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text(function(d) { return d; });

    svg.append("rect")
    	.attr("x", width - 18)
    	.attr("y", 68)
      	.attr("width", 18)
      	.attr("height", 2)
      	.style("fill", "red");

    svg.append("text")
      	.attr("x", width - 24)
      	.attr("y", 68)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text(covariate);

    var legendBlocker = svg.append("rect")
      .attr("id", "legendBlocker")
      .attr("width", 100)
      .attr("height", 20)
      .attr("x", width - 100)
      .attr("y", 60)
      .style("fill", "white")
      .style("opacity", 1);

});

</script>

{% endblock %}
