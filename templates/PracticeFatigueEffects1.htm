{% extends "_base.htm" %}
{% block title %}
  Practice effects
{% endblock%}

{% block bodycontent %}

<script type="text/javascript">
/// Overall tutorial progress
var progress = {{progress}};
/// Checkpoint for page
var current = 0;
/// Graph
var file = "/static/stimuli/OrderEffects/practice1.csv";
/// Name variables here
var yLabel = "Puzzle score",
    condLabel = "Exercise routine",
    xLabel = "Time (minutes)",
    covariate = "Skill"
    xMax = 65,
    yMax = 16;
/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var measure = [];
var meanCond1 = [];
var meanCond2 = [];
var meanCond3 = [];
/// Text
  var text = [
    "Letâ€™s look at the results for the experiment. On this graph, the x-axis shows the time elapsed in the experiment. We have randomized the order that the conditions get experienced in. Each condition involves a different activity lasting about 10 minutes prior to the crossword puzzle, which they are given 5 minutes to attempt. Each time, the crossword puzzle is different, but they are all have roughly the same difficulty level. After attempting the puzzle, participants continue with the next condition. The y-axis represents their scores.",

    "Participants first listen to a relaxing song of their own choice using headphones and then try the puzzle (the <i>Relaxing Music</i> condition). We expect this condition to lower their anxiety, which will hopefully allow them to do better on the puzzle. Each blue point represents the score of a single participant collected in this condition. As you can see, the average puzzle score seems pretty low. But we need to see how this compares to the other conditions. Next up is the control condition, in which the participants should do worse on the puzzle because their anxiety levels should be higher. Let's see how well they do in the control condition!",

    "That's strange! We expected participants to score lower in the control condition because they aren't engaged in an anxiety-reducing activity prior to attempting the puzzle, but they actually score higher in this condition! Let's see how they do in the <i>Meditation</i> condition, when they engage in meditation prior to doing the puzzle.",

    "The scores in this condition are pretty high (as we expected). But how can we explain why people score so poorly in the <i>Relaxing Music</i> condition? Our prior research suggests that this should help decrease anxiety, so their puzzle scores here should be as high as in the <i>Meditation</i> condition (or at least higher than the control condition).",

    "Let's consider that participants do the crossword puzzles 3 times during the experiment. Even though the specific questions they answer each time are different, they require the same type of problem-solving skills. Our <font color='red'>skill</font> at a task often increases the more times we do it, due to the practice offered by repetition.",

    "Let's look at the average skill levels of participants as they go through the experiment. After the first condition and their first round trying out the puzzle, their <font color='red'>skill</font> in the puzzle increases greatly! It turns out on crossword puzzles like this, familiarizing yourslf with the format and the type of questions goes a long way towards helping your ability to do it. Because participants start out with a low <font color='red'>skill</font> level, it's not surprising their scores in the first condition are lower. This increase in <font color='red'>skill</font> is due to a <b>practice effect</b>, when increasing experience in an experiment leads people to do better on later tasks. Because this practice is often associated with doing a test used to measure a dependent variable multiple times, the practice effect is sometimes also called a <b>testing effect</b>.",

    "Participants go into the second puzzle with a higher <font color='red'>skill</font> level. Doing the puzzle a second time gives them more practice, resulting in a further increase in <font color='red'>skill</font>! Notice that the increase this time isn't as great as when they did it the first time. It's often the case that once participants' skill levels are higher, subsequent practice results in diminishing gains. One other thing to notice is the slight decrease in skill between practices (when they do the puzzle). Usually, skills will decrease slightly if they are not practiced constantly.",

    "With the 3rd time doing the puzzle, participants raise their <font color='red'>skill</font> levels even further (though notice that the increase is smaller). If we assume that participants' performance on the puzzle should be determined largely by their <font color='red'>skill</font> level, then their scores should usually be around the <font color='red'>red line</font>. We can see that in each condition, their scores are clustered either above or below the line. This gives an idea of whether a condition gave their performance a 'boost' or not.",

    "So if we account for their levels of <font color='red'>skill</font> during the experiment (that increase because of the practice effect), we should conclude that scores in the <i>Relaxing Music</i> and <i>Meditation</i> conditions are above what we would expect - these activities helped performance on the puzzle, as we predicted! In contrast to this, scores in the control condition are about what we would expect based on their skill levels at the time.",
    
    "If we didn't take <font color='red'>skill</font> into account and looked only at the means in each condition, then the 'boost' in performance given by the <i>Relaxing Music</i> and <i>Meditation</i> conditions would not have been easily detected. We might have concluded that <i>Meditation</i> helps performance in the crossword puzzle, but that <i>Relaxing music</i> actually hinders performance."
    ]
/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}
/// Function to move text forward and back within page
function next(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 10</i>");
    if (current<text.length-1) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }
    // Does different things each time page advances
    if (current==1) { 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 0); }    
    else if (current==4) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 0); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==5) { svg.select("path").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==6) { svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==7) { svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==text.length-1) { 
      $("#next").attr("disabled", true);
      showQuiz(); 
      svg.select("path").transition().duration(800).delay(200).style("opacity", 0); 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 1); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 1);
    }
  
}
function previous(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");
    if (current>0) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }
    // Does different things each time page advances
    if (current==8) {
      svg.select("path").transition().duration(800).delay(200).style("opacity", 1); 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 0); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==6) { svg.select("#lineBlocker2").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==5) { svg.select("#lineBlocker1").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==4) { svg.select("path").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 1); 
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M2").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#Mean3").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#M3").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { svg.select("#pointBlocker2").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==1) { svg.select("#pointBlocker1").transition().duration(800).delay(200).style("opacity", 1); } 
    else if (current==0) { 
      $("#previous").attr("disabled", true); 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#Mean1").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#M1").transition().duration(800).delay(200).style("opacity", 0);
    }
}
/// Enables next button
function enable() {
  $('#answer').attr('disabled', false);
}
/// Function to show quiz
function showQuiz() {
  $('#continue').hide();
  $('#quiz').show();
}
/// Shows quiz answer
function answerQuiz2() {
  Q2Outcome = $('input[name=q2]:checked', '#Quiz2').val();
  $('#answer').hide()
  $('#optionA, #optionB').css('opacity', '0.5');
  $('#q2a, #q2b').attr('disabled', true);
  $('#A2').show();
  $('#submit').show();
  $('#A2').html("<b>Correct answer: FALSE!</b><br>In this experiment, we used a puzzle where one\'s performance was significantly determined by skill, and where skill was greatly helped by practice. While a within-subjects design will always expose participants to more experience and \'practice\' that may affect later performance, these effects are sometimes minimal and have no significant impact on the conclusions of your study.<br><br>There are several cases where it will not be a problem. First, if you are testing a psychological characteristic where skill is not a factor (e.g. personality tests). In this case, experiencing a test multiple times would not provide 'practice' that would change performance.<br><br>Secondly, if you expect participants to already be at reasonably high skill levels when starting the experiment (i.e. high enough that practice won't make much of a difference), then practice effects will not obscure our results by much. Recall from the graph above that practice has the greatest effect when the skill level is initially low. One precautionary step researchers sometimes take is to give training in a test before participants start the experiment, so that their skill levels are high enough at the start of the experiment.");
}
/// Submit function
function MySubmit(){
  console.log('Submit dat!');
  $('#Q2').val(Q2Outcome);
  progress += 1;
  $('#progressinput').val(progress);
  $('#myForm').submit();
}
</script>

<div class="logout"><a href="/logout.htm">Logout</a></div>

<div class="pg" style="height:940px">

  <h2><center>Practice effects</center></h2>
  
  <br>
  
  <div id="text" style="display:show; height:120px" align="justify">
    <script>document.write(text[current])</script>
  </div>

  <div id="progress" style="display:show; height:10px; font-size:12px;" align="right">
    <i>Page <script>document.write(current+1)</script> of 10</i>
  </div>

  <br>

  <div align="right">
    <button id="previous" onclick="current--; previous(current)" disabled="true">&larr; Previous</button>&nbsp;&nbsp;<button id="next" onclick="current++; next(current);">Next &rarr;</button>
  </div>

  <div id="graph" width="900" height="600" align="center"></div>

  <br>

  <div id="quiz" width="900" style="display:none">

    <p><b>TRUE OR FALSE?</b> Practice effects will always be a problem when using within-subjects designs.</p>

    <form id="Quiz2" style="position:relative;left:20px">
      <input type="radio" value="A" name="q2" id="q2a" onchange="enable();"><label for="q2a"><span id="optionA">&nbspTrue</span></label>&nbsp&nbsp&nbsp&nbsp&nbsp
      <input type="radio" value="B" name="q2" id="q2b" onchange="enable();"><label for="q2b"><span id="optionB">&nbspFalse</span></label><br>
    </form><br>

    <center><button id="answer" onclick="answerQuiz2()" disabled="true">Check answer</button></center>

    <div id="A2" style="display:none"></div>

  </div>

  <br>

  <center>
    <form id="myForm" method="post" action="/PracticeFatigueEffects">
      <input type="submit" id="submit" onclick="MySubmit()" value="Continue" style="display:none"/>
      <input type="hidden" id="Q2" name="Q2" value="">
      <input type="hidden" id="progressinput" name="progressinput" value="">
    </form>
  </center>

</div>

<style>
  body {
    font: 14px sans-serif;
  }
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }
  .dot {
    stroke: #000;
  }
  path { 
      stroke: steelblue;
      stroke-width: 2;
      fill: none;
  }
</style>

<script type="text/javascript">
// Sets dimensions of graph and axes
var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 800 - margin.left - margin.right,
    height = 350 - margin.top - margin.bottom;
var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);
var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);
var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Relaxing music","Control","Meditation"]);
var color = d3.scale.category10()
    .domain(["Relaxing music","Control","Meditation"]);
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/10);
var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");
var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
var line = d3.svg.line()
  .interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });
// Sets attributes of blockers
var lineBlockerAttr = new Object();
  lineBlockerAttr.x=width/3;
  lineBlockerAttr.y=0;
var pointBlockerAttr = new Object();
  pointBlockerAttr.x=width/2;
  pointBlockerAttr.y=0;
// Reads data from .csv file
d3.csv(file, function(error, data) {
    if (error) throw error;
    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
    console.log(parsedData.length);
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure.push(Number(parsedData[i].measure));
      if (parsedData[i].condition=="Relaxing music") {
        meanCond1.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Control") {
        meanCond2.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Meditation") {
        meanCond3.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////
    data.forEach(function(d) {
      d.iv = +d.iv;
      d.dv = +d.dv;
      d.t = +d.t;
      d.condition = d.condition;
    });
    // x.domain(d3.extent(data, function(d) { return d.A; })).nice();
    // y.domain(d3.extent(data, function(d) { return d.B; })).nice();
    // x.domain([0,xMax+1]);
    // y.domain([0,yMax])
    // Appends line
    svg.append("path")
      .attr("class", "line")
      .style("stroke", "red")
      //.style("stroke-dasharray", "10, 5")
      .style("opacity", 0)
      .attr("d", line(data));
    // Append line blocker
    var lineBlocker1 = svg.append("rect")
      .attr("id", "lineBlocker1")
      .attr("width", width/3)
      .attr("height", height)
      .attr("x", x(20))
      .attr("y", 0)
      .style("fill", "white")
      .style("opacity", 1);
    var lineBlocker2 = svg.append("rect")
      .attr("id", "lineBlocker2")
      .attr("width", width/3)
      .attr("height", height)
      .attr("x", x(40))
      .attr("y", 0)
      .style("fill", "white")
      .style("opacity", 1);
    // Appends means
    var Mean1 = svg.append("line")
      .attr("id", "Mean1")
      .attr("x1", cond("Relaxing music")-x(2))
      .attr("x2", cond("Relaxing music")+x(2))
      .attr("y1", y(d3.mean(meanCond1)))
      .attr("y2", y(d3.mean(meanCond1)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      .style("stroke", color("Relaxing music"));
    var M1 = svg.append("text")
        .attr("id", "M1")
        .attr("x", cond("Relaxing music")-x(1.2))
        .attr("y", y(d3.mean(meanCond1)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 0)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond1).toFixed(2));
    var Mean2 = svg.append("line")
      .attr("id", "Mean2")
      .attr("x1", cond("Control")-x(2))
      .attr("x2", cond("Control")+x(2))
      .attr("y1", y(d3.mean(meanCond2)))
      .attr("y2", y(d3.mean(meanCond2)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color("Control"));
    var M2 = svg.append("text")
        .attr("id", "M2")
        .attr("x", cond("Control")-x(1.2))
        .attr("y", y(d3.mean(meanCond2)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond2).toFixed(2));
    var Mean3 = svg.append("line")
      .attr("id", "Mean3")
      .attr("x1", cond("Meditation")-x(2))
      .attr("x2", cond("Meditation")+x(2))
      .attr("y1", y(d3.mean(meanCond3)))
      .attr("y2", y(d3.mean(meanCond3)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      .style("stroke", color("Meditation"));
    var M3 = svg.append("text")
        .attr("id", "M3")
        .attr("x", cond("Meditation")-x(1.2))
        .attr("y", y(d3.mean(meanCond3)))
        .attr("dy", ".35em")
        .attr("dx", x(-2))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanCond3).toFixed(2));
    // Appends points
    svg.selectAll(".dot")
        .data(data)
    .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 3.5)
        //.attr("cx", function(d) { return x(d.iv); })
        .attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
        .style("fill", function(d) { return color(d.condition); })
        .style("opacity", 0);
    // Append point blocker
    var pointBlocker1 = svg.append("rect")
    .attr("id", "pointBlocker1")
    .attr("width", width/3)
    .attr("height", height)
    .attr("x", x(20))
    .attr("y", 0)
    .style("fill", "white")
    .style("opacity", 1);
    var pointBlocker2 = svg.append("rect")
    .attr("id", "pointBlocker2")
    .attr("width", width/3)
    .attr("height", height)
    .attr("x", x(40))
    .attr("y", 0)
    .style("fill", "white")
    .style("opacity", 1);
    // Appends axes
    svg.append("g")
      .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text(xLabel);
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text(yLabel);
    svg.append("text")
        // .attr("x", cond("Control"))
        .attr("x", cond("Relaxing music"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Relaxing music");
    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Control"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Control");
    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Meditation"))
        .attr("y", y(1.8))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Meditation");
    // Appends legend
    var legend = svg.selectAll(".legend")
        .data(color.domain())
    .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
    legend.append("rect")
        .attr("x", width - 18)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", color);
    legend.append("text")
        .attr("x", width - 24)
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .text(function(d) { return d; });
    svg.append("rect")
      .attr("x", width - 18)
      .attr("y", 68)
        .attr("width", 18)
        .attr("height", 2)
        .style("fill", "red");
    svg.append("text")
        .attr("x", width - 24)
        .attr("y", 68)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .text(covariate);
    var legendBlocker = svg.append("rect")
      .attr("id", "legendBlocker")
      .attr("width", 100)
      .attr("height", 20)
      .attr("x", width - 100)
      .attr("y", 60)
      .style("fill", "white")
      .style("opacity", 1);
});
</script>

{% endblock %}