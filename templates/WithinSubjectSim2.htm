{% extends "_base.htm" %}
{% block title %}
	Within-Subject Designs
{% endblock%}


{% block bodycontent %}

<form id="dataform" method="post" action="/WithinSubject">
	<input id="numbersims2" name="numbersims2" type="hidden">
	<input id="Q4Answer" name="Q4Answer" type="hidden">
	<input id="progressinput" name="progressinput" type="hidden">
	<input id="directioninput" name="directioninput" type="hidden">
	<input id="Submit" onclick="MySubmit()" value="Submit" type="hidden">
</form>

<h2 id="header2" style="display:none"><center>Within-Subjects Designs</center></h2>

<div id="logout" style="display:none" class="logout"><a href="/logout.htm">Logout</a></div>

<div id="container" style="display:none">
	<div class="corypg">
	<button id="backButton">Go Back</button>
	<br>
		<center>
			<span id="span1" style="display:inline-block;visibility:hidden;position:relative;left:-50px"><b>High Correlation</b></span>
			<span id="span2" style="display:inline-block;position:relative;left:85px;visibility:hidden"><b>Low Correlation</b></span>
			
			<div id="firstrow" style="display:none">
				<div id="within1" style="display:inline-block">
					<div id="graph2"></div>
					<div class="sigTrack" style="display:none;position:relative;top:-55px;left:10px"><font color="green">Significant Results: <span id="sigTrack2"></span></font></div>
					<div class="pdiv" style="position:relative;top:20px">p = <span id="p2"></span></div>
					
					<!-- <div id="ttest1" class="ttest">
						<span id="tspan1">t=1.00</span><br>
						<span id="pspan1">p=.50</span><br>
						<span id="dspan1">power=.8</span><br>
					</div> -->
				</div>
				
				<div id="within2" style="display:inline-block">
					<div id="graph4"></div>
					<div class="sigTrack" style="display:none;position:relative;top:-55px;left:10px"><font color="green">Significant Results: <span id="sigTrack4"></span></font></div>
					<div class="pdiv" style="position:relative;top:20px">p = <span id="p4"></span></div>
				</div>
			</div>
			<br>

			<br>


			<div id="secondrow" style="display:none">
				<span style="display:inline-block;margin-right:25px;position:relative;top:-100px">
					<b>Low<br>Correlation</b>
				</span>
				<div id="between2" style="display:inline-block">
					<div id="graph3"></div>
					<div class="sigTrack" style="display:none;position:relative;top:-55px;left:10px">Significant Results: <span id="sigTrack3"></span></div>
					<div class="pdiv" style="display:none">p = <span id="p3"></span></div>
				</div>
				
				<div id="within2" style="display:inline-block">
					<div id="graph4"></div>
					<div class="sigTrack" style="display:none;position:relative;top:-55px;left:10px">Significant Results: <span id="sigTrack4"></span></div>
					<div class="pdiv" style="display:none">p = <span id="p4"></span></div>
				</div>
			</div>
		</center>	
		<br>

		<button id="ResampleButton" style="width:100px;display:none" onclick="UpdateData()">Resample</button>

		<div id="Quiz4" style="display:none">
			<p><b>Which of these shows a significant difference between the veggie and fruit conditions?</b></p>
			<form id="Q4Answers" style="position:relative;left:20px">
				<input type="radio" name="q4" value="A" id="q4a"><label for="q4a">The graph on the left</label><br>
				<input type="radio" name="q4" value="B" id="q4b"><label for="q4b">The graph on the right</label><br>
			</form><br>
			<!-- <button id="nextButton">Submit</button> -->

		</div>

		<div id="Text1" style="display:none">

			<p><span id="responseSpan"></span></p>

			<p>Another advantage of within subject designs is that they are able to detect small but consistent differences that between-subjects designs cannot, again because within-subjects designs inherently control for individual differences.</p>

			<p>Here we see the same example data from both between and within-subjects designs. Notice again that the comparisons we're drawing are fundamentally different in each case. On the left, we are comparing the means of each group in the context of each group's variance. On the right, we are comparing the consistency and magnitude of the differences between the Fruit and Veggie Conditions for the same participants. Remember our handy rule of thumb from earlier: if the lines are largely parallel, it tells us that the treatments are having similar effects for all of the participants (i.e. that the treatment scores are correlated). When the lines are sloped in the same direction, the treatments probably have significantly different effects.</p>	

			<p>In a within-subjects experiment, the means of the effect in each condition might be very similar. However, if each subject saw increased weight loss in Veggie Condition compared to Fruit Condition, even if the increase is small, it might be significantly greater than 0. Small, consistent differences for each individual subject can yield a significant result.</p>
		</div>
		
		<div id="Text2" style="display:none">
			<p>Try simulating a few datasets with the "Resample" button. Notice how when the lines are more parallel (i.e. the correlation is high between the two conditions), small differences between the treatments can be statistically significant in a within-subjects design.</p>

			<p>If the datapoints are not correlated, it means that the relationship between the effectiveness of each condition is not consistent across participants. Notice that for the graphs you generate on the right, the lines often have wildly varying slopes. This means some participants might lose more weight in the Fruit Condition, while others lose much more in the Veggie Condition, and some lose the same amount of weight in both. <b>That's what it means for these interventions to be uncorrelated: knowing someone's weight loss in the fruit condition gives us no information about their weight loss in the veggie condition.</b> The correlation in the top right graph is very strong (.9874), meaning that if we know a participant's weight after the veggie condition, we have a very good idea of what their weight will be in the fruit condition (slightly higher, in this case). This small, but very consistent, difference gives us a very low p value (.0001).</p>
			
		</div>
		<button id="nextButton">Next</button>

		
		
		<!-- <center><button id="SubmitButton" style="display:none" onclick="goForward()">Continue to Quiz</button></center> -->
	</div>
	<div class="sidebar">
		<u><b><ul>Key Ideas:</ul></b></u>
		<span id="vocabSpan" style="font-size: 14px">
			<li><i>Between-Subjects Designs</i> assign each person to one condition.</li><br>
			<li><i>Within-Subjects Designs</i> assign every person to every condition.</li><br>
			<li>Within-subjects designs eliminate individual differences as a factor that could influence the dependent variable</li><br>
			<li>Between-subjects designs examine group means</li><br>
			<li>Within-subjects designs examine difference scores</li><br>
			<li>Within-subjects designs are insensitive to population variance</li>
		</span>
	</div>
</div>

<div class="pg" style="width:1000px;display:none" id="review">
	<button id="backButton" onclick="goBack()">Go Back</button>
	<h1>Ready for the Quiz?</h1>
	<p> Take a moment to review before the quiz. You can mouse over each bullet point to see a visual aid. Click below when you're ready!</p>

	<u><b>Review:</b></u><ul>
		<li><span id="list0"><i>Between-Subjects Designs</i> assign each person to one condition.</span></li><br>
		<li><span id="list1"><i>Within-Subjects Designs</i> assign every person to every condition.</span></li><br>
		<li><span id="list2">Between-subjects designs examine group means</span></li><br>
		<li><span id="list3">Within-subjects designs examine difference scores</span></li><br>
		<li><span id="list4">Within-subjects designs are insensitive to population variance</span></li><br>
		<li><span id="list5">Within-subjects designs can detect small but consistent differences that between-subjects designs cannot detect</span></li>
	</ul>
	
	<button onclick="MySubmit()">Ready!</button>
</div>

<center>
	<div class="review" id="listDiv0" style="top:-300px;left:230px; display:none; height:200px; width:350px">
		<br><b>Between-Subjects</b>
		<img src="/static/images/BetweenSubjects.png" style="height:150px"></img>
	</div>

	<div class="review" id="listDiv1" style="top:-300px;left:230px; display:none; height:200px; width:350px">
		<br><b>Within-Subjects</b>
		<img src="/static/images/WithinSubjects.png" style="height:150px"></img>
	</div>

	<div class="review" id="listDiv2" style="top:-300px;left:230px; display:none; height:200px; width:350px">
		<img src="/static/images/BS2.png" style="height:200px"></img>
	</div>

	<div class="review" id="listDiv3" style="top:-300px;left:230px; display:none; height:200px; width:350px">
		<img src="/static/images/WS1.png" style="height:200px"></img>
	</div>

	<div class="review" id="listDiv4" style="top:-305px;left:230px; display:none; height:220px; width:443px">
		<img src="/static/images/PopVar.png" style="height:220px"></img>
	</div>

	<div class="review" id="listDiv5" style="top:-305px;left:230px; display:none; height:220px; width:443px">
		<img src="/static/images/Correl.png" style="height:220px"></img>
	</div>
</center>


<script>



var datasets = 1;
var progress = {{progress}};
var Sim2Progress = 0;
var pValues = {{pValues2}};
var sigTally = {{sigTally2}};
var correlations = {{correlations}};
var sig = [0,0,0,0]

// Cache the DOM

var $container = $('#container');
var $logout = $('#logout');
var $header = $('#header2');

var $all = [$('#Text1'), $('#Text2'), $('#Quiz4'), $('#ResampleButton')];

var $vocabSpan = $('#vocabSpan');

var $sigTrack = [$('#sigTrack1'), $('#sigTrack2'), $('#sigTrack3'), $('#sigTrack4')];
var $pdiv = [$('#p1'), $('#p2'), $('#p3'), $('#p4')];

var $review = $('#review');


var $backButton = $('#backButton');
var $nextButton = $('#nextButton');

// var $spans = [$('#span1'), $('#span2')];

// var $hide = [$('#Text1'), $('#nextButton')];

var $graphs = [$('#graph1'), $('#graph2'), $('#graph3'), $('#graph4')];

var $progress0 = [$('#Quiz4'), $('#firstrow')];
var $progress1 = [$('#Text1'), $('#nextButton')];
var $progress2 = [$('.sigTrack'), $('.pdiv'), $('#Text2'), $('#ResampleButton'), $('#SubmitButton')];
var $invisibleStuff = [$('#p2'), $('#p4'), $('.pdiv'), $('#span1'), $('#span2')];

var $listItems = [$('#list0'), $('#list1'), $('#list2'), $('#list3'), $('#list4'), $('#list5')];

var $listDivs = [$('#listDiv0'),$('#listDiv1'),$('#listDiv2'),$('#listDiv3'),$('#listDiv4'),$('#listDiv5')];

function EventBinder(){
	$backButton.unbind().on('click', goBack);
	$nextButton.unbind().on('click', goForward);

}

function Render(){
	for(var i = 0; i < $all.length; i++){
		$all[i].hide();
	}
	for(var i = 0; i < $invisibleStuff.length; i++){
		$invisibleStuff[i].css('visibility', 'hidden');
	}
	
	if(Sim2Progress == 0){
		for(var i = 0; i < $progress0.length; i++){
			$progress0[i].show();			
		}

	}else if(Sim2Progress == 1){
		// record the result
		Q4Outcome = $('input[name=q4]:checked', '#Q4Answers').val();
		if(Q4Outcome != 'A' & Q4Outcome != 'B'){
			alert('Please make a selection!');
			return
		}else if(Q4Outcome == 'A'){
			$('#responseSpan').html('Right!');
		}else{
			$('#responseSpan').html(
				'Actually it\'s the one on the left. (Check out those p values!)'
				);
		}
	
		for(var i = 0; i < $progress1.length; i++){
			$progress1[i].show();			
		}

		for(var i = 0; i < $invisibleStuff.length; i++){
			$invisibleStuff[i].css("visibility", "visible");
		}


	}else if(Sim2Progress == 2){

		console.log('Starting!');

		// show stuff
		for(var i = 0; i < $progress2.length; i++){
			$progress2[i].show();
		}

		for(var i = 0; i < $invisibleStuff.length; i++){
			$invisibleStuff[i].css("visibility", "visible");
		}

		$vocabSpan.append(
			'<br><li>Within-subjects designs can detect small but consistent differences that between-subjects designs cannot detect</li>'
			);
		// maybe this should be an empty span in the html and I should populate it with items in an array in JS

		KeepScore();
	}else if(Sim2Progress < 0){
		BackPage();			
	}
	
}



function goForward(){
	
	Sim2Progress += 1;
	console.log('Progress: '+Sim2Progress);
	Render();
	if(Sim2Progress > 2){
		Review();
	}
}

function goBack(){
	Sim2Progress -= 1;
	Render();
	
	if(Sim2Progress <= 2){
		$('#container').show();
		$('#review').hide();
	}
	


}

// bind events for hover
HoverEvents = function(){

	// not sure what "cancel" does...
	var cancel = false;
	$listItems[0].hover(function(){
		$listDivs[0].show();
		$listItems[1].css('opacity', '0.4');
		$listItems[2].css('opacity', '0.4');
		$listItems[3].css('opacity', '0.4');
		$listItems[4].css('opacity', '0.4');
		$listItems[5].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[0].hide();
			$listItems[1].css('opacity', '1.0');
			$listItems[2].css('opacity', '1.0');
			$listItems[3].css('opacity', '1.0');
			$listItems[4].css('opacity', '1.0');
			$listItems[5].css('opacity', '1.0');
	});

	$listItems[1].hover(function(){
		$listDivs[1].show();
		$listItems[0].css('opacity', '0.4');
		$listItems[2].css('opacity', '0.4');
		$listItems[3].css('opacity', '0.4');
		$listItems[4].css('opacity', '0.4');
		$listItems[5].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[1].hide();
			$listItems[0].css('opacity', '1.0');
			$listItems[2].css('opacity', '1.0');
			$listItems[3].css('opacity', '1.0');
			$listItems[4].css('opacity', '1.0');
			$listItems[5].css('opacity', '1.0');
	});

	$listItems[2].hover(function(){
		$listDivs[2].show();
		$listItems[1].css('opacity', '0.4');
		$listItems[0].css('opacity', '0.4');
		$listItems[3].css('opacity', '0.4');
		$listItems[4].css('opacity', '0.4');
		$listItems[5].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[2].hide();
			$listItems[1].css('opacity', '1.0');
			$listItems[0].css('opacity', '1.0');
			$listItems[3].css('opacity', '1.0');
			$listItems[4].css('opacity', '1.0');
			$listItems[5].css('opacity', '1.0');
	});

	$listItems[3].hover(function(){
		$listDivs[3].show();
		$listItems[1].css('opacity', '0.4');
		$listItems[2].css('opacity', '0.4');
		$listItems[0].css('opacity', '0.4');
		$listItems[4].css('opacity', '0.4');
		$listItems[5].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[3].hide();
			$listItems[1].css('opacity', '1.0');
			$listItems[2].css('opacity', '1.0');
			$listItems[0].css('opacity', '1.0');
			$listItems[4].css('opacity', '1.0');
			$listItems[5].css('opacity', '1.0');
	});

	$listItems[4].hover(function(){
		$listDivs[4].show();
		$listItems[1].css('opacity', '0.4');
		$listItems[2].css('opacity', '0.4');
		$listItems[3].css('opacity', '0.4');
		$listItems[0].css('opacity', '0.4');
		$listItems[5].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[4].hide();
			$listItems[1].css('opacity', '1.0');
			$listItems[2].css('opacity', '1.0');
			$listItems[3].css('opacity', '1.0');
			$listItems[0].css('opacity', '1.0');
			$listItems[5].css('opacity', '1.0');
	});

	$listItems[5].hover(function(){
		$listDivs[5].show();
		$listItems[1].css('opacity', '0.4');
		$listItems[2].css('opacity', '0.4');
		$listItems[3].css('opacity', '0.4');
		$listItems[4].css('opacity', '0.4');
		$listItems[0].css('opacity', '0.4');
	},function(){
		if(!cancel)
			$listDivs[5].hide();
			$listItems[1].css('opacity', '1.0');
			$listItems[2].css('opacity', '1.0');
			$listItems[3].css('opacity', '1.0');
			$listItems[4].css('opacity', '1.0');
			$listItems[0].css('opacity', '1.0');
	});

}


function KeepScore(){
	
	for(var i = 0; i < pList.length; i++){
		sig[i] += sigList[i]
	}

	$sigTrack[0].html(sig[0]+'/'+datasets);
	$sigTrack[1].html(sig[1]+'/'+datasets);
	$sigTrack[2].html(sig[2]+'/'+datasets);
	$sigTrack[3].html(sig[3]+'/'+datasets);
}





function Review(){
	$('#container').hide();
	$('#review').show();
	HoverEvents();
}

function BackPage(){
	console.log('Submitting!');
	progress -=1;
	$('#progressinput').val(String(progress));
	$('#directioninput').val('backward');
	$('#dataform').submit();
}

function MySubmit(){
	console.log('Submitting!');
	progress +=1;
	$('#progressinput').val(String(progress));
	$('#numbersims2').val(datasets);
	$('#Q4Answer').val(Q4Answer);
	$('#dataform').submit();
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

/// Graph
// list of files
var FileList = ['/static/stimuli/WithinSubjects/data1.csv',  
	'/static/stimuli/WithinSubjects/data2.csv',  
	'/static/stimuli/WithinSubjects/data3.csv',  
	'/static/stimuli/WithinSubjects/data4.csv',  
	'/static/stimuli/WithinSubjects/data5.csv',  
	'/static/stimuli/WithinSubjects/data6.csv',  
	'/static/stimuli/WithinSubjects/data7.csv',  
	'/static/stimuli/WithinSubjects/data8.csv',  
	'/static/stimuli/WithinSubjects/data9.csv',  
	'/static/stimuli/WithinSubjects/data10.csv',  
	'/static/stimuli/WithinSubjects/data11.csv',  
	'/static/stimuli/WithinSubjects/data12.csv',  
	'/static/stimuli/WithinSubjects/data13.csv',  
	'/static/stimuli/WithinSubjects/data14.csv',  
	'/static/stimuli/WithinSubjects/data15.csv',  
	'/static/stimuli/WithinSubjects/data16.csv',  
	'/static/stimuli/WithinSubjects/data17.csv',  
	'/static/stimuli/WithinSubjects/data18.csv',  
	'/static/stimuli/WithinSubjects/data19.csv',  
	'/static/stimuli/WithinSubjects/data20.csv',  
	'/static/stimuli/WithinSubjects/data21.csv',  
	'/static/stimuli/WithinSubjects/data22.csv',  
	'/static/stimuli/WithinSubjects/data23.csv',  
	'/static/stimuli/WithinSubjects/data24.csv',  
	'/static/stimuli/WithinSubjects/data25.csv',  
	'/static/stimuli/WithinSubjects/data26.csv',  
	'/static/stimuli/WithinSubjects/data27.csv',  
	'/static/stimuli/WithinSubjects/data28.csv',  
	'/static/stimuli/WithinSubjects/data29.csv',  
	'/static/stimuli/WithinSubjects/data30.csv',  
	'/static/stimuli/WithinSubjects/data31.csv',  
	'/static/stimuli/WithinSubjects/data32.csv',  
	'/static/stimuli/WithinSubjects/data33.csv',  
	'/static/stimuli/WithinSubjects/data34.csv',  
	'/static/stimuli/WithinSubjects/data35.csv',  
	'/static/stimuli/WithinSubjects/data36.csv',  
	'/static/stimuli/WithinSubjects/data37.csv',  
	'/static/stimuli/WithinSubjects/data38.csv',  
	'/static/stimuli/WithinSubjects/data39.csv',  
	'/static/stimuli/WithinSubjects/data40.csv',  
	'/static/stimuli/WithinSubjects/data41.csv',  
	'/static/stimuli/WithinSubjects/data42.csv',  
	'/static/stimuli/WithinSubjects/data43.csv',  
	'/static/stimuli/WithinSubjects/data44.csv',  
	'/static/stimuli/WithinSubjects/data45.csv',  
	'/static/stimuli/WithinSubjects/data46.csv',  
	'/static/stimuli/WithinSubjects/data47.csv',  
	'/static/stimuli/WithinSubjects/data48.csv',  
	'/static/stimuli/WithinSubjects/data49.csv',  
	'/static/stimuli/WithinSubjects/data50.csv'];

var FileList2 = ['/static/stimuli/WithinSubjects/lowcorreldata1.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata2.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata3.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata4.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata5.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata6.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata7.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata8.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata9.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata10.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata11.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata12.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata13.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata14.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata15.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata16.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata17.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata18.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata19.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata20.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata21.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata22.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata23.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata24.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata25.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata26.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata27.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata28.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata29.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata30.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata31.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata32.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata33.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata34.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata35.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata36.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata37.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata38.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata39.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata40.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata41.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata42.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata43.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata44.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata45.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata46.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata47.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata48.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata49.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata50.csv']


// Randomly select a file from the list

// A particularly good example
random = 11;
File = FileList[random];
File2 = FileList2[random];
pList = pValues[random];
sigList = sigTally[random];
corList = correlations[random];


$pdiv[0].html(pList[0]+',    r = '+corList[0]);
$pdiv[1].html(pList[1]+',    r = '+corList[0]);
$pdiv[2].html(pList[2]+',    r = '+corList[1]);
$pdiv[3].html(pList[3]+',    r = '+corList[1]);

/// Name variables here
var	yLabel = "Weight",
	condLabel = "Exercise routine",
	xMax = 20,
	yMax = 225;
	

/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var dvb = [];
var meanVeggieBetween = [];
var meanFruitBetween = [];
var meanVeggieWithin = [];
var meanFruitWithin = [];
var meanWideFruitBetween = [];
var meanWideVeggieBetween = [];
var meanWideFruitWithin = [];
var meanWideVeggieWithin = [];


/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}


var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 250 - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([125,yMax]);


var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Veggie","Fruit"]);

var color = d3.scale.category10()
    .domain(["Veggie","Fruit"]);

var xAxis = d3.svg.axis()
    .scale(cond)
    .orient("bottom")
    // .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");



var chart1 = d3.select("#graph1").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart2 = d3.select("#graph2").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart3 = d3.select("#graph3").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart4 = d3.select("#graph4").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// var line = d3.chart1.line()
// 	.interpolate("basis")
//     .x(function(d) { return x(d.t); })
//     .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

// var lineBlockerAttr = new Object();
// 	lineBlockerAttr.x=width/3;
// 	lineBlockerAttr.y=0;

// var pointBlockerAttr = new Object();
// 	pointBlockerAttr.x=width/2;
// 	pointBlockerAttr.y=0;

// Reads data from .csv file

// for between-subjects

// CHART 1
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieBetween.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitBetween.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanBetween = chart1.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanVeggieBetween)))
      .attr("y2", y(d3.mean(meanVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanBetween = chart1.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanFruitBetween)))
      .attr("y2", y(d3.mean(meanFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart1.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart1.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart1.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", "-5em")
    // 	// .attr("dx", "1em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart1.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });



});

// CHART 2

// for within-subjects
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
	console.log(parsedData.length);
    for (i = 0; i < 20; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      dvb.push(Number(parsedData[i].dvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.dvb = +d.dvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanFruitWithin)))
    //   .attr("y2", y(d3.mean(meanFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points

	var line = chart2.selectAll("line")
		.data(data)
		.enter().append("line")
			.filter(function(d) { return d.condition == 'Veggie' })
				.attr("x1", cond("Veggie"))
				.attr("x2", cond("Fruit"))
				.attr("y1", function(d) { return y(d.dv); })
				.attr("y2", function(d) { return y(d.dvb); })
				.attr("stroke", "black");


  	chart2.selectAll(".dot")
      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

    // trying to draw lines.....
    

	// var lines = chart2.selectAll("line")
	// 	.data(parsedData)
	// 	.enter()
	// 		.append("line")
	// 		.attr("x1", cond(5))
	// 		.attr("x2", cond(15))
	// 		.attr("y1", y(parsedData.dv))
	// 		.attr("y2", y(parsedData.dv))
	// 		.attr("stroke", "black");
	
	// Not quite working yet...
	// var line = chart2.selectAll("line")
	// 	.data(data)
	// 	.enter().append("line")
	// 	    .attr("x1", cond("Veggie"))
	// 	    .attr("x2", cond("Fruit"))
	// 	    .attr("y1", function(d) { return y(d.dv); })
	// 	    .attr("y2", function(d) { return y(d.dv); })
	// 	    .attr("stroke", "black");

	

    // Appends axes

  	chart2.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart2.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

   //  // Appends legend

  	// var legend = chart2.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 3
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanWideVeggieBetween.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanWideFruitBetween.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanWithin = chart3.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanWithin = chart3.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanWideFruitBetween)))
      .attr("y2", y(d3.mean(meanWideFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart3.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart3.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart3.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart3.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 4
d3.csv(File2, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
	console.log(parsedData.length);
    for (i = 0; i < 20; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      dvb.push(Number(parsedData[i].dvb));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.dvb = +d.dvb;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points


	

	var line = chart4.selectAll("line")
		.data(data)
		.enter().append("line")
			.filter(function(d) { return d.condition == 'Veggie' })
				.attr("x1", cond("Veggie"))
				.attr("x2", cond("Fruit"))
				.attr("y1", function(d) { return y(d.dv); })
				.attr("y2", function(d) { return y(d.dvb); })
				.attr("stroke", "black");

  	chart4.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart4.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart4.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart4.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});





function UpdateData(){
	datasets += 1;

	$graphs[0].html('');
	meanFruitBetween = [];
	meanVeggieBetween = [];

	$graphs[1].html('');
	meanFruitWithin = [];
	meanVeggieWithin = [];

	$graphs[2].html('');
	meanWideFruitBetween = [];
	meanWideVeggieBetween = [];

	$graphs[3].html('');
	meanWideFruitWithin = [];
	meanWideVeggieWithin = [];


	// randomly select a datafile

	random = Math.floor(Math.random() * FileList.length)

	random = Math.floor(Math.random() * FileList.length);
	File = FileList[random];
	File2 = FileList2[random];
	pList = pValues[random];
	sigList = sigTally[random];
	corList = correlations[random];

	KeepScore();

	$pdiv[0].html(pList[0]+',    r = '+corList[0]);
	$pdiv[1].html(pList[1]+',    r = '+corList[0]);
	$pdiv[2].html(pList[2]+',    r = '+corList[1]);
	$pdiv[3].html(pList[3]+',    r = '+corList[1]);


	var chart1 = d3.select("#graph1").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart2 = d3.select("#graph2").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart3 = d3.select("#graph3").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart4 = d3.select("#graph4").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	// CHART 1
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieBetween.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitBetween.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanBetween = chart1.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanVeggieBetween)))
	      .attr("y2", y(d3.mean(meanVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanBetween = chart1.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanFruitBetween)))
	      .attr("y2", y(d3.mean(meanFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart1.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart1.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart1.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart1.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });



	});

	// CHART 2

	// for within-subjects
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      dvb.push(Number(parsedData[i].dvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.dv = +d.dv;
	    	d.dvb = +d.dvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});


	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanFruitWithin)))
	    //   .attr("stroke", color("Fruit"));

		var line = chart2.selectAll("line")
			.data(data)
			.enter().append("line")
				.filter(function(d) { return d.condition == 'Veggie' })
					.attr("x1", cond("Veggie"))
					.attr("x2", cond("Fruit"))
					.attr("y1", function(d) { return y(d.dv); })
					.attr("y2", function(d) { return y(d.dvb); })
					.attr("stroke", "black");



	    // Appends points

	  	chart2.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart2.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart2.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart2.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 3
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanWideVeggieBetween.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanWideFruitBetween.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanWithin = chart3.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
	      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanWithin = chart3.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanWideFruitBetween)))
	      .attr("y2", y(d3.mean(meanWideFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart3.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart3.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart3.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart3.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 4
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
		console.log(parsedData.length);
	    for (i = 0; i < 20; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      dvb.push(Number(parsedData[i].dvb));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv;
	    	d.dv = +d.dv;
	    	d.dvb = +d.dvb;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});
	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("stroke", color("Fruit"));


		var line = chart4.selectAll("line")
			.data(data)
			.enter().append("line")
				.filter(function(d) { return d.condition == 'Veggie' })
					.attr("x1", cond("Veggie"))
					.attr("x2", cond("Fruit"))
					.attr("y1", function(d) { return y(d.dv); })
					.attr("y2", function(d) { return y(d.dvb); })
					.attr("stroke", "black");



	    // Appends points

	  	chart4.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5));})
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart4.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart4.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart4.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});
}

$(document).ready(function(){
	$header.show();
	$logout.show();
	$container.show();
	Render();
	EventBinder();
});

</script>

{% endblock %}