{% extends "_base.htm" %}
{% block title %}
	Sim 2!!
{% endblock%}


{% block bodycontent %}

<form id="dataform" method="post" action="/WithinSubject">
	<input id="numbersims2" name="numbersims2" type="hidden">
	<input id="progressinput" name="progressinput" type="hidden">
	<input id="Submit" onclick="MySubmit()" value="Submit" type="hidden">
</form>

<h2><center>Within-Subjects Designs</center></h2>

<div class="logout"><a href="/logout.htm">Logout</a></div>

<div class="pg">
	<center>
			<span style="display:inline-block"><b>Between Subjects</b></span>
			<span style="display:inline-block;position:relative;left:170px"><b>Within Subjects</b></span>
		<div id="firstrow">
			<span style="position:relative;top:-100px;display:inline-block;margin-right:25px;visibility:hidden">
				<b>High<br>Correlation</b>
			</span>
			<div id="between1" style="display:inline-block">
				<div id="graph1"></div>
				<div class="pdiv" style="display:none">p = <span id="p1"></span></div>
				
				<!-- <div id="ttest1" class="ttest">
					<span id="tspan1">t=1.00</span><br>
					<span id="pspan1">p=.50</span><br>
					<span id="dspan1">power=.8</span><br>
				</div> -->
			</div>
			
			<div id="within1" style="display:inline-block">
				<div id="graph2"></div>
				<div class="pdiv" style="display:none">p = <span id="p2"></span></div>
			</div>
		</div>
		<br>

		<br>


		<div id="secondrow" style="display:none">
			<span style="display:inline-block;margin-right:25px;position:relative;top:-100px">
				<b>Low<br>Correlation</b>
			</span>
			<div id="between2" style="display:inline-block">
				<div id="graph3"></div>
				<div class="pdiv" style="display:none">p = <span id="p3"></span></div>
			</div>
			
			<div id="within2" style="display:inline-block">
				<div id="graph4"></div>
				<div class="pdiv" style="display:none">p = <span id="p4"></span></div>
			</div>
		</div>
	</center>	
	<br>

	<button id="ResampleButton" style="width:100px;display:none" onclick="UpdateData()">Resample</button>

	<div id="Text1">
		<p>The second advantage of within subject designs (closely related to the first) is that they are able to detect small but consistent differences that between subjects designs cannot, again because the designs ask different questions of the data.</p>

		<p>Here we see the same example data from both between and within subjects designs. Notice again that the comparisons we're drawing are fundamentally different in each case. On the left, we are comparing the means of each group in the context of each group's variance. On the right, we are comparing the consistency and magnitude of the differences between the Fruit and Vegetable Conditions for the same participants. A handy rule of thumb is to imagine lines connecting each individual's data in one condition to his/her data in the other. If the lines are largely parallel, it tells us that the treatments are having similar effects for all of the participants. If they're mostly sloped in the same direction, it tells us the treatments might have significantly different effects.</p>	
	</div>
	
	<div id="Text2" style="display:none">
		<p>In a within-subjects experiment, Fruit Condition and Vegetable Condition might have the same group means as they did before (7.5 and 8, respectively). However, if each subject saw increased weight loss in Vegetable Condition compared to Fruit Condition, even if the increase is small, the average increase might be significantly greater than 0. Small, consistent differences for each individual subject can yield a significant result.</p>

		<p>Try simulating a few datasets with the "Resample" button. Notice how when the lines are more parallel (i.e. the correlation is high between the two conditions), small differences can be statistically significant.</p>
	</div>
	<button id="NextButton" style="width:100px" onclick="StartSimulations()">Continue</button>

	
	
	<center><button id="SubmitButton" style="display:none;float:right" onclick="MySubmit()">Continue to Quiz</button></center>
	
	

</div>

<script>



var datasets = 0;
var progress = {{progress}};
var pValues = {{pValues2}};
var sigTally = {{sigTally2}};
var correlations = {{correlations}};

function StartSimulations(){
	console.log('Starting!');

	// hide stuff
	$('#Text1').hide();
	$('#NextButton').hide();

	// show stuff
	$('.pdiv').show();
	$('#ttest1').css('visibility', 'visible');
	$('#ttest2').css('visibility', 'visible');
	$('#secondrow').show();
	$('#Text2').show();
	$('#ResampleButton').show();
	$('#SubmitButton').show();
	$('#firstrow').find('span').css('visibility', 'visible');
}

// function ResampleFunction(){
// 	// Generate new data
// 	datasets += 1;
// 	console.log('Resampling!');

// }


function MySubmit(){
	console.log('Submitting!');
	progress +=1;
	$('#progressinput').val(String(progress));
	$('#numbersims2').val(datasets);
	$('#dataform').submit();
}


/// Graph
// list of files
var FileList = ['/static/stimuli/WithinSubjects/data1.csv',  
	'/static/stimuli/WithinSubjects/data2.csv',  
	'/static/stimuli/WithinSubjects/data3.csv',  
	'/static/stimuli/WithinSubjects/data4.csv',  
	'/static/stimuli/WithinSubjects/data5.csv',  
	'/static/stimuli/WithinSubjects/data6.csv',  
	'/static/stimuli/WithinSubjects/data7.csv',  
	'/static/stimuli/WithinSubjects/data8.csv',  
	'/static/stimuli/WithinSubjects/data9.csv',  
	'/static/stimuli/WithinSubjects/data10.csv',  
	'/static/stimuli/WithinSubjects/data11.csv',  
	'/static/stimuli/WithinSubjects/data12.csv',  
	'/static/stimuli/WithinSubjects/data13.csv',  
	'/static/stimuli/WithinSubjects/data14.csv',  
	'/static/stimuli/WithinSubjects/data15.csv',  
	'/static/stimuli/WithinSubjects/data16.csv',  
	'/static/stimuli/WithinSubjects/data17.csv',  
	'/static/stimuli/WithinSubjects/data18.csv',  
	'/static/stimuli/WithinSubjects/data19.csv',  
	'/static/stimuli/WithinSubjects/data20.csv',  
	'/static/stimuli/WithinSubjects/data21.csv',  
	'/static/stimuli/WithinSubjects/data22.csv',  
	'/static/stimuli/WithinSubjects/data23.csv',  
	'/static/stimuli/WithinSubjects/data24.csv',  
	'/static/stimuli/WithinSubjects/data25.csv',  
	'/static/stimuli/WithinSubjects/data26.csv',  
	'/static/stimuli/WithinSubjects/data27.csv',  
	'/static/stimuli/WithinSubjects/data28.csv',  
	'/static/stimuli/WithinSubjects/data29.csv',  
	'/static/stimuli/WithinSubjects/data30.csv',  
	'/static/stimuli/WithinSubjects/data31.csv',  
	'/static/stimuli/WithinSubjects/data32.csv',  
	'/static/stimuli/WithinSubjects/data33.csv',  
	'/static/stimuli/WithinSubjects/data34.csv',  
	'/static/stimuli/WithinSubjects/data35.csv',  
	'/static/stimuli/WithinSubjects/data36.csv',  
	'/static/stimuli/WithinSubjects/data37.csv',  
	'/static/stimuli/WithinSubjects/data38.csv',  
	'/static/stimuli/WithinSubjects/data39.csv',  
	'/static/stimuli/WithinSubjects/data40.csv',  
	'/static/stimuli/WithinSubjects/data41.csv',  
	'/static/stimuli/WithinSubjects/data42.csv',  
	'/static/stimuli/WithinSubjects/data43.csv',  
	'/static/stimuli/WithinSubjects/data44.csv',  
	'/static/stimuli/WithinSubjects/data45.csv',  
	'/static/stimuli/WithinSubjects/data46.csv',  
	'/static/stimuli/WithinSubjects/data47.csv',  
	'/static/stimuli/WithinSubjects/data48.csv',  
	'/static/stimuli/WithinSubjects/data49.csv',  
	'/static/stimuli/WithinSubjects/data50.csv'];

var FileList2 = ['/static/stimuli/WithinSubjects/lowcorreldata1.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata2.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata3.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata4.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata5.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata6.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata7.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata8.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata9.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata10.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata11.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata12.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata13.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata14.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata15.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata16.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata17.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata18.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata19.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata20.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata21.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata22.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata23.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata24.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata25.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata26.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata27.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata28.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata29.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata30.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata31.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata32.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata33.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata34.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata35.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata36.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata37.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata38.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata39.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata40.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata41.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata42.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata43.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata44.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata45.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata46.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata47.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata48.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata49.csv',  
	'/static/stimuli/WithinSubjects/lowcorreldata50.csv']


// Randomly select a file from the list

// A particularly good example
var random = 29;
var File = FileList[random];
var File2 = FileList2[random];
var pList = pValues[random];
var sigList = sigTally[random];
var corList = correlations[random];


$('#p1').html(pList[0]+',    r = '+corList[0]);
$('#p2').html(pList[1]+',    r = '+corList[0]);
$('#p3').html(pList[2]+',    r = '+corList[1]);
$('#p4').html(pList[3]+',    r = '+corList[1]);

/// Name variables here
var	yLabel = "Weight",
	condLabel = "Exercise routine",
	xMax = 20,
	yMax = 250;
	

/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var meanVeggieBetween = [];
var meanFruitBetween = [];
var meanVeggieWithin = [];
var meanFruitWithin = [];
var meanWideFruitBetween = [];
var meanWideVeggieBetween = [];
var meanWideFruitWithin = [];
var meanWideVeggieWithin = [];


/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}


var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 300 - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([100,yMax]);


var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    .domain(["Veggie","Fruit"]);

var color = d3.scale.category10()
    .domain(["Veggie","Fruit"]);

var xAxis = d3.svg.axis()
    .scale(cond)
    .orient("bottom")
    // .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");



var chart1 = d3.select("#graph1").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart2 = d3.select("#graph2").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart3 = d3.select("#graph3").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var chart4 = d3.select("#graph4").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// var line = d3.chart1.line()
// 	.interpolate("basis")
//     .x(function(d) { return x(d.t); })
//     .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

// var lineBlockerAttr = new Object();
// 	lineBlockerAttr.x=width/3;
// 	lineBlockerAttr.y=0;

// var pointBlockerAttr = new Object();
// 	pointBlockerAttr.x=width/2;
// 	pointBlockerAttr.y=0;

// Reads data from .csv file

// for between subjects

// CHART 1
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieBetween.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitBetween.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanBetween = chart1.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanVeggieBetween)))
      .attr("y2", y(d3.mean(meanVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanBetween = chart1.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanFruitBetween)))
      .attr("y2", y(d3.mean(meanFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart1.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition) ; })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart1.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart1.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", "-5em")
    // 	// .attr("dx", "1em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart1.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });



});

// CHART 2

// for within subjects
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart2.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanFruitWithin)))
    //   .attr("y2", y(d3.mean(meanFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points

  	chart2.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // trying to draw lines.....
    

	// var lines = chart2.selectAll("line")
	// 	.data(parsedData)
	// 	.enter()
	// 		.append("line")
	// 		.attr("x1", cond(5))
	// 		.attr("x2", cond(15))
	// 		.attr("y1", y(parsedData.dv))
	// 		.attr("y2", y(parsedData.dv))
	// 		.attr("stroke", "black");
	
	// Not quite working yet...
	// var line = chart2.selectAll("line")
	// 	.data(data)
	// 	.enter().append("line")
	// 	    .attr("x1", cond("Veggie"))
	// 	    .attr("x2", cond("Fruit"))
	// 	    .attr("y1", function(d) { return y(d.dv); })
	// 	    .attr("y2", function(d) { return y(d.dv); })
	// 	    .attr("stroke", "black");

	

    // Appends axes

  	chart2.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart2.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

   //  // Appends legend

  	// var legend = chart2.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 3
d3.csv(File, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanWideVeggieBetween.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanWideFruitBetween.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    var VeggieMeanWithin = chart3.append("line")
      .attr("x1", cond("Veggie")-x(1))
      .attr("x2", cond("Veggie")+3*x(1))
      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
      .attr("stroke", color("Veggie"));

    var FruitMeanWithin = chart3.append("line")
      .attr("x1", cond("Fruit")-3*x(1))
      .attr("x2", cond("Fruit")+x(1))
      .attr("y1", y(d3.mean(meanWideFruitBetween)))
      .attr("y2", y(d3.mean(meanWideFruitBetween)))
      .attr("stroke", color("Fruit"));

    // Appends points

  	chart3.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart3.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart3.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart3.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});


// CHART 4
d3.csv(File2, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      // measure.push(Number(parsedData[i].measure));

      if (parsedData[i].condition=="Veggie") {
        meanWideVeggieWithin.push(Number(parsedData[i].dv));
      }
      else if (parsedData[i].condition=="Fruit") {
        meanWideFruitWithin.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv + randomJitter(-0.3,0.3);
    	d.dv = +d.dv;
    	d.t = +d.t;
    	d.condition = d.condition;
  	});

  	// create the scales x() and y()
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax]);


    // Appends lines for means

    // var VeggieMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Veggie")-x(1))
    //   .attr("x2", cond("Veggie")+3*x(1))
    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
    //   .attr("stroke", color("Veggie"));

    // var FruitMeanWithin = chart4.append("line")
    //   .attr("x1", cond("Fruit")-3*x(1))
    //   .attr("x2", cond("Fruit")+x(1))
    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
    //   .attr("stroke", color("Fruit"));

    // Appends points

  	chart4.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	.attr("cx", function(d) { return cond(d.condition); })
      		// Not great because it's not scaled, but it works for now
      	.attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 1);

    // Appends axes

  	chart4.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)


  	chart4.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	// .append("text")
    // 	.attr("class", "label")
    // 	.attr("transform", "rotate(-90)")
    // 	.attr("y", 6)
    // 	.attr("dy", ".71em")
    // 	.style("text-anchor", "end")
    // 	.text(yLabel)

    // Appends legend

  	// var legend = chart4.selectAll(".legend")
   //    	.data(color.domain())
   //  .enter().append("g")
   //    	.attr("class", "legend")
   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	// legend.append("rect")
   //    	.attr("x", width - 18)
   //    	.attr("width", 18)
   //    	.attr("height", 18)
   //    	.style("fill", color);

  	// legend.append("text")
   //    	.attr("x", width - 24)
   //    	.attr("y", 9)
   //    	.attr("dy", ".35em")
   //    	.style("text-anchor", "end")
   //    	.text(function(d) { return d; });

});





function UpdateData(){
	datasets += 1;

	$('#graph1').html('');
	meanFruitBetween = [];
	meanVeggieBetween = [];

	$('#graph2').html('');
	meanFruitWithin = [];
	meanVeggieWithin = [];

	$('#graph3').html('');
	meanWideFruitBetween = [];
	meanWideVeggieBetween = [];

	$('#graph4').html('');
	meanWideFruitWithin = [];
	meanWideVeggieWithin = [];


	// randomly select a datafile

	random = Math.floor(Math.random() * FileList.length)

	random = Math.floor(Math.random() * FileList.length);
	File = FileList[random];
	File2 = FileList2[random];
	pList = pValues[random];
	sigList = sigTally[random];
	corList = correlations[random];

	$('#p1').html(pList[0]+',    r = '+corList[0]);
	$('#p2').html(pList[1]+',    r = '+corList[0]);
	$('#p3').html(pList[2]+',    r = '+corList[1]);
	$('#p4').html(pList[3]+',    r = '+corList[1]);


	var chart1 = d3.select("#graph1").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart2 = d3.select("#graph2").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart3 = d3.select("#graph3").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var chart4 = d3.select("#graph4").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	  	.append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	// CHART 1
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieBetween.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitBetween.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanBetween = chart1.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanVeggieBetween)))
	      .attr("y2", y(d3.mean(meanVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanBetween = chart1.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanFruitBetween)))
	      .attr("y2", y(d3.mean(meanFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart1.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition) ; })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart1.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart1.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart1.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });



	});

	// CHART 2

	// for within subjects
	d3.csv(File, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart2.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanFruitWithin)))
	    //   .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart2.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart2.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart2.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart2.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 3
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanWideVeggieBetween.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanWideFruitBetween.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    var VeggieMeanWithin = chart3.append("line")
	      .attr("x1", cond("Veggie")-x(1))
	      .attr("x2", cond("Veggie")+3*x(1))
	      .attr("y1", y(d3.mean(meanWideVeggieBetween)))
	      .attr("y2", y(d3.mean(meanWideVeggieBetween)))
	      .attr("stroke", color("Veggie"));

	    var FruitMeanWithin = chart3.append("line")
	      .attr("x1", cond("Fruit")-3*x(1))
	      .attr("x2", cond("Fruit")+x(1))
	      .attr("y1", y(d3.mean(meanWideFruitBetween)))
	      .attr("y2", y(d3.mean(meanWideFruitBetween)))
	      .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart3.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart3.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart3.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart3.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});


	// CHART 4
	d3.csv(File2, function(error, data) {
	  	if (error) throw error;

	    //////// Saves data for calculation ////////
	    parsedData = JSON.parse(JSON.stringify(data));
	  
	    for (i = 0; i < parsedData.length; i++) {
	      iv.push(Number(parsedData[i].iv));
	      dv.push(Number(parsedData[i].dv));
	      // measure.push(Number(parsedData[i].measure));

	      if (parsedData[i].condition=="Veggie") {
	        meanWideVeggieWithin.push(Number(parsedData[i].dv));
	      }
	      else if (parsedData[i].condition=="Fruit") {
	        meanWideFruitWithin.push(Number(parsedData[i].dv));
	      }
	    }
	    ////////////////////////////////////////////

	  	data.forEach(function(d) {
	    	d.iv = +d.iv + randomJitter(-0.3,0.3);
	    	d.dv = +d.dv;
	    	d.t = +d.t;
	    	d.condition = d.condition;
	  	});

	  	// create the scales x() and y()
	  	// x.domain([0,xMax+1]);
	  	// y.domain([0,yMax]);


	    // Appends lines for means

	    // var VeggieMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Veggie")-x(1))
	    //   .attr("x2", cond("Veggie")+3*x(1))
	    //   .attr("y1", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("y2", y(d3.mean(meanWideVeggieWithin)))
	    //   .attr("stroke", color("Veggie"));

	    // var FruitMeanWithin = chart4.append("line")
	    //   .attr("x1", cond("Fruit")-3*x(1))
	    //   .attr("x2", cond("Fruit")+x(1))
	    //   .attr("y1", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("y2", y(d3.mean(meanWideFruitWithin)))
	    //   .attr("stroke", color("Fruit"));

	    // Appends points

	  	chart4.selectAll(".dot")
	      	.data(data)
	   	.enter().append("circle")
	      	.attr("class", "dot")
	      	.attr("r", 3.5)
	      	.attr("cx", function(d) { return cond(d.condition); })
	      		// Not great because it's not scaled, but it works for now
	      	.attr("cy", function(d) { return y(d.dv); })
	      	.style("fill", function(d) { return color(d.condition); })
	      	.style("opacity", 1);

	    // Appends axes

	  	chart4.append("g")
	    	.attr("class", "x axis")
	      	.attr("transform", "translate(0," + height + ")")
	      	.call(xAxis)


	  	chart4.append("g")
	      	.attr("class", "y axis")
	      	.call(yAxis)
	   	// .append("text")
	    // 	.attr("class", "label")
	    // 	.attr("transform", "rotate(-90)")
	    // 	.attr("y", 6)
	    // 	.attr("dy", ".71em")
	    // 	.style("text-anchor", "end")
	    // 	.text(yLabel)

	    // Appends legend

	  	// var legend = chart4.selectAll(".legend")
	   //    	.data(color.domain())
	   //  .enter().append("g")
	   //    	.attr("class", "legend")
	   //    	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

	  	// legend.append("rect")
	   //    	.attr("x", width - 18)
	   //    	.attr("width", 18)
	   //    	.attr("height", 18)
	   //    	.style("fill", color);

	  	// legend.append("text")
	   //    	.attr("x", width - 24)
	   //    	.attr("y", 9)
	   //    	.attr("dy", ".35em")
	   //    	.style("text-anchor", "end")
	   //    	.text(function(d) { return d; });

	});
}

</script>

{% endblock %}