{% extends "_base.htm" %}
{% block title %}
	Carryover effects
{% endblock%}

{% block bodycontent %}

<script type="text/javascript">

/// Overall tutorial progress
var progress = {{progress}};

/// Checkpoint for page
var current = 0;

/// Graph
var file = "/static/stimuli/OrderEffects/carryover1.csv";

/// Name variables here
var	yLabel = "Accuracy",
		condLabel = "Exercise routine",
		xLabel = "Time (minutes)",
		covariate = "Arousal"
		xMax = 20,
		yMax = 14;

/// Variables for calculating stuff
var parsedData;
var iv = [];
var dv = [];
var measure = [];
var meanControl = [];
var meanExperimental = [];

/// Text

  var text = [
    "Let’s look at the results for the experiment. On this graph, the x-axis shows the time elapsed in the experiment. The experimental condition is experienced first, and subjects are measured on their accuracy at about 5 minutes. After that, they experience the control condition, and their accuracy is measured again at about 15 minutes in the experiment. The y-axis represents their accuracy scores on the spatial reasoning task.",

    "Participants first go through the intense exercise regimen (the experimental condition), and then have their spatial reasoning ability measured. Let’s look at their results! Each blue point represents the score of a single participant collected in this condition. The average accuracy score after engaging in the intense exercise regimen is shown below as a blue horizontal line. This seems like a pretty good average – but we need to compare this score against the control task. ",

    "Next (in the control condition), subjects read a short story while sitting down before having their spatial reasoning ability measured again. Let’s take a look at their results this time around, shown as orange points below. The average accuracy score after the control condition is also shown below. This is pretty similar to the previous average (after the intense exercise regimen).",

    "It seems our hypothesis is not supported as there doesn’t seem to be a difference in their spatial reasoning ability between both the experimental and control conditions! <br><br>While it could be that your hypothesis was just wrong and intense exercise truly has no effect on one’s spatial reasoning ability, let’s look at another possible reason for this result.",

    "We believe that arousal is the mechanism that leads to an improvement in people’s spatial reasoning ability. Imagine that we had measured their arousal level throughout the experiment using a heart-rate monitor. We can plot their arousal level on the same graph with a line (that will be red in color).",

    "When they start the experiment, their arousal level is at its baseline. When they experience the experimental condition, their arousal level increases suddenly, so it looks like the intense exercise regimen successfully manipulated the arousal of the subjects! We expected this to lead to higher accuracy scores on the spatial reasoning task.",

    "But because the exercise was so intense, their arousal levels didn’t drop off soon enough after they finished the exercise routine! We can see that it tapers off gradually, but by the time they experience the control condition, their arousal levels are still higher than before they began the experiment.",

    "This is a problem because it means their arousal levels in the control condition were much higher than they were supposed to be. The high arousal level at this point is probably what led to similar accuracy scores in the control condition – in terms of arousal; they were essentially still in the experimental condition!",

    "In general terms, this is called an order effect, where exposure to one condition changes a participant’s responses to a later condition. More specifically, this is an example of a <b>carryover effect</b>, <i>a type of order effect where experiencing one condition changes the subjects' experience of a later condition</i>. This is a serious threat to internal validity in within-subjects designs because it could mean a particular condition is not manipulating the mechanisms you are interested in (in this case, arousal) the way you intend."
    ]

/// Function for noise
function randomJitter(min, max) {
  return Math.random() * (max - min) + min;
}

/// Function to move text forward and back within page

function next(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current<text.length-1) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==1) { 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#experimentalMean").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#experimentalM").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==2) { svg.select("#pointBlocker").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==4) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 0); 
      svg.select("#experimentalMean").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#experimentalM").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#controlMean").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#controlM").transition().duration(800).delay(200).style("opacity", 0);
    }
    else if (current==5) { svg.select("path").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==6) { svg.select("#lineBlocker").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==text.length-1) { 
      $("#next").attr("disabled", true);
      showQuiz(); 
    }
  
}

function previous(current) {
    
    // Changes text
    $("#text").fadeTo(100, 0)
      .delay(200)
      .queue(function(n) { 
        $("#text").html(text[current]); 
        n();
      })
      .fadeTo(100, 1);
    $("#progress").html("<i>Page " + (current+1) + " of 9</i>");

    if (current>0) {
      // Blocks buttons for a bit
      $("#next").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
      $("#previous").attr("disabled", true)
        .delay(600)
        .queue(function(n) { 
          $(this).attr("disabled", false); 
          n();
        });
    }

    // Does different things each time page advances
    if (current==5) { svg.select("#lineBlocker").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==4) { svg.select("path").transition().duration(800).delay(200).style("opacity", 0); }
    else if (current==3) { 
      svg.select("#legendBlocker").transition().duration(800).delay(0).style("opacity", 1); 
      svg.select("#experimentalMean").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#experimentalM").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#controlMean").transition().duration(800).delay(200).style("opacity", 1);
      svg.select("#controlM").transition().duration(800).delay(200).style("opacity", 1);
    }
    else if (current==1) { svg.select("#pointBlocker").transition().duration(800).delay(200).style("opacity", 1); }
    else if (current==0) { 
      $("#previous").attr("disabled", true); 
      svg.selectAll(".dot").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#experimentalMean").transition().duration(800).delay(200).style("opacity", 0);
      svg.select("#experimentalM").transition().duration(800).delay(200).style("opacity", 0);
    }
}

/// Enables next button
function enable() {
  $('#answer').attr('disabled', false);
}

/// Function to show quiz

function showQuiz() {
  $('#continue').hide();
  $('#quiz').show();
}

/// Shows quiz answer

function answerQuiz2() {

  Q2Outcome = $('input[name=q2]:checked', '#Quiz2').val();

  $('#answer').hide()
  $('#optionA, #optionB').css('opacity', '0.5');
  $('#q2a, #q2b').attr('disabled', true);
  $('#A2').show();
  $('#submit').show();

  $('#A2').html('<b>Actually, they\'re both valid ways!</b><br>If you used a between-subjects design, different groups of participants would experience the different conditions and each manipulation would not be able to contaminate the other. However, the usual drawbacks of this design still apply, and researchers generally look for other ways of dealing with carryover effects instead of always reverting to a between-subjects design.<br><br>If we want to stick with the within-subjects design, we could increase the time between the conditions so that arousal in the experimental condition has time to decay. However, we do not always know how long it takes for participants to return to normal on some important characteristic (in this case, because we measure their arousal with a heart-rate monitor, we have that information. Let\'s see what happens if we repeat this experiment, but this time stretching it out over a longer period of time.');
}

/// Submit function

function MySubmit(){
  console.log('Submit dat!');
  $('#Q2').val(Q2Outcome);
  progress += 1;
  $('#progressinput').val(progress);
  $('#myForm').submit();
}

</script>

<div class="logout"><a href="/logout.htm">Logout</a></div>

<div class="pg" style="height:940px">

	<h2><center>Carryover effects</center></h2>
	
	<br>
  
  <div id="text" style="display:show; height:100px" align="justify">
    <script>document.write(text[current])</script>
  </div>

  <div id="progress" style="display:show; height:10px; font-size:12px;" align="right">
    <i>Page <script>document.write(current+1)</script> of 9</i>
  </div>

  <br>

  <div align="right">
    <button id="previous" onclick="current--; previous(current)" disabled="true">&larr; Previous</button>&nbsp;&nbsp;<button id="next" onclick="current++; next(current);">Next &rarr;</button>
  </div>

	<div id="graph" width="900" height="600" align="center"></div>

  <br>

	<div id="quiz" width="900" style="display:none">

    <p><b>Which of the following ways is preferable for dealing with carryover effects?</b></p>

    <form id="Quiz2" style="position:relative;left:20px">
      <input type="radio" value="A" name="q2" id="q2a" onchange="enable();"><label for="q2a"><span id="optionA">&nbspUse a between-subjects design</span></label><br>
      <input type="radio" value="B" name="q2" id="q2b" onchange="enable();"><label for="q2b"><span id="optionB">&nbspIncrease the time between the experimental and control conditions so that arousal has time to decay</span></label><br>
    </form><br>

    <center><button id="answer" onclick="answerQuiz2()" disabled="true">Check answer</button></center>

    <div id="A2" style="display:none"></div>

  </div>

  <br>

  <center>
    <form id="myForm" method="post" action="/CarryoverEffects">
      <input type="submit" id="submit" onclick="MySubmit()" value="Continue" style="display:none"/>
      <input type="hidden" id="Q2" name="Q2" value="">
      <input type="hidden" id="progressinput" name="progressinput" value="">
    </form>
  </center>

</div>

<style>

	body {
	  font: 14px sans-serif;
	}

	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}

	.dot {
	  stroke: #000;
	}

	path { 
	    stroke: steelblue;
	    stroke-width: 2;
	    fill: none;
	}

</style>

<script type="text/javascript">

// Sets dimensions of graph and axes

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    // width = 800 - margin.left - margin.right,
    // height = 400 - margin.top - margin.bottom;
    width = 700 - margin.left - margin.right,
    height = 350 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width])
    .domain([0,xMax+1]);

var y = d3.scale.linear()
    .range([height, 0])
    .domain([0,yMax]);

var cond = d3.scale.ordinal()
    .rangePoints([0, width],1)
    // .domain(["Experimental","Control"]);
    .domain(["Exercise regimen","Read short story"]);
    // .domain(["Control", "Experimental"]);

var color = d3.scale.category10()
    // .domain(["Experimental","Control"]);
    .domain(["Exercise regimen","Read short story"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(xMax/2);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var line = d3.svg.line()
	.interpolate("basis")
    .x(function(d) { return x(d.t); })
    .y(function(d) { return y(d.measure); });

// Sets attributes of blockers

var lineBlockerAttr = new Object();
	lineBlockerAttr.x=width/3;
	lineBlockerAttr.y=0;

var pointBlockerAttr = new Object();
	pointBlockerAttr.x=width/2;
	pointBlockerAttr.y=0;

// Reads data from .csv file

d3.csv(file, function(error, data) {
  	if (error) throw error;

    //////// Saves data for calculation ////////
    parsedData = JSON.parse(JSON.stringify(data));
    console.log(parsedData.length);
  
    for (i = 0; i < parsedData.length; i++) {
      iv.push(Number(parsedData[i].iv));
      dv.push(Number(parsedData[i].dv));
      measure.push(Number(parsedData[i].measure));

      // if (parsedData[i].condition=="Control") {
      if (parsedData[i].condition=="Read short story") {
        meanControl.push(Number(parsedData[i].dv));
      }
      // else if (parsedData[i].condition=="Experimental") {
      else if (parsedData[i].condition=="Exercise regimen") {
        meanExperimental.push(Number(parsedData[i].dv));
      }
    }
    ////////////////////////////////////////////

  	data.forEach(function(d) {
    	d.iv = +d.iv;
    	d.dv = +d.dv;
    	d.t = +d.t;
      d.condition = d.condition;
  	});

  	// x.domain(d3.extent(data, function(d) { return d.A; })).nice();
  	// y.domain(d3.extent(data, function(d) { return d.B; })).nice();
  	// x.domain([0,xMax+1]);
  	// y.domain([0,yMax])

    // Appends line

    svg.append("path")
    	.attr("class", "line")
    	.style("stroke", "red")
    	//.style("stroke-dasharray", "10, 5")
    	.style("opacity", 0)
      .attr("d", line(data));

    // Append line blocker

  	var lineBlocker = svg.append("rect")
  		.attr("id", "lineBlocker")
      .attr("width", width)
  		.attr("height", height)
  		.attr("x", function(d) {return lineBlockerAttr.x;})
  		.attr("y", function(d) {return lineBlockerAttr.y;})
  		.style("fill", "white")
  		.style("opacity", 1);

    // Appends means

    var controlMean = svg.append("line")
      .attr("id", "controlMean")
      // .attr("x1", cond("Control")-x(1))
      // .attr("x2", cond("Control")+x(1))
      .attr("x1", cond("Read short story")-x(1))
      .attr("x2", cond("Read short story")+x(1))
      .attr("y1", y(d3.mean(meanControl)))
      .attr("y2", y(d3.mean(meanControl)))
      .style("opacity", 1)
      .style("stroke-width", 2)
      // .style("stroke", color("Control"));
      .style("stroke", color("Read short story"));

    var controlM = svg.append("text")
        .attr("id", "controlM")
        // .attr("x", cond("Control")+x(1.2))
        .attr("x", cond("Read short story")+x(1.2))
        .attr("y", y(d3.mean(meanControl)))
        .attr("dy", ".35em")
        .attr("dx", x(1))
        .style("opacity", 1)
        .style("text-anchor", "end")
        .text(d3.mean(meanControl).toFixed(2));

    var experimentalMean = svg.append("line")
      .attr("id", "experimentalMean")
      // .attr("x1", cond("Experimental")-x(1))
      // .attr("x2", cond("Experimental")+x(1))
      .attr("x1", cond("Exercise regimen")-x(1))
      .attr("x2", cond("Exercise regimen")+x(1))
      .attr("y1", y(d3.mean(meanExperimental)))
      .attr("y2", y(d3.mean(meanExperimental)))
      .style("opacity", 0)
      .style("stroke-width", 2)
      // .style("stroke", color("Experimental"));
      .style("stroke", color("Exercise regimen"));

    var experimentalM = svg.append("text")
      .attr("id", "experimentalM")
      // .attr("x", cond("Experimental")+x(1.2))
      .attr("x", cond("Exercise regimen")+x(1.2))
      .attr("y", y(d3.mean(meanExperimental)))
      .attr("dy", ".35em")
      .attr("dx", x(1))
      .style("opacity", 0)
      .style("text-anchor", "end")
      .text(d3.mean(meanExperimental).toFixed(2));

    // Appends points

  	svg.selectAll(".dot")
      	.data(data)
   	.enter().append("circle")
      	.attr("class", "dot")
      	.attr("r", 3.5)
      	//.attr("cx", function(d) { return x(d.iv); })
      	.attr("cx", function(d) { return cond(d.condition) + x(randomJitter(-0.5,0.5)); })
        .attr("cy", function(d) { return y(d.dv); })
      	.style("fill", function(d) { return color(d.condition); })
      	.style("opacity", 0);

    // Append point blocker

    var pointBlocker = svg.append("rect")
		.attr("id", "pointBlocker")
    .attr("width", width/2)
		.attr("height", height)
		.attr("x", function(d) {return pointBlockerAttr.x;})
		.attr("y", function(d) {return pointBlockerAttr.y;})
		.style("fill", "white")
		.style("opacity", 1);

    // Appends axes

  	svg.append("g")
    	.attr("class", "x axis")
      	.attr("transform", "translate(0," + height + ")")
      	.call(xAxis)
    .append("text")
    	.attr("class", "label")
    	.attr("x", width)
    	.attr("y", -6)
    	.style("text-anchor", "end")
    	.text(xLabel);

  	svg.append("g")
      	.attr("class", "y axis")
      	.call(yAxis)
   	.append("text")
    	.attr("class", "label")
    	.attr("transform", "rotate(-90)")
    	.attr("y", 6)
    	.attr("dy", ".71em")
    	.style("text-anchor", "end")
    	.text(yLabel);

    svg.append("text")
        // .attr("x", cond("Control"))
        .attr("x", cond("Read short story"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Read short story");

    svg.append("text")
        // .attr("x", cond("Experimental"))
        .attr("x", cond("Exercise regimen"))
        .attr("y", y(2))
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("Exercise regimen");

    // Appends legend

  	var legend = svg.selectAll(".legend")
      	.data(color.domain())
    .enter().append("g")
      	.attr("class", "legend")
      	.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  	legend.append("rect")
      	.attr("x", width - 18)
      	.attr("width", 18)
      	.attr("height", 18)
      	.style("fill", color);

  	legend.append("text")
      	.attr("x", width - 24)
      	.attr("y", 9)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text(function(d) { return d; });

    svg.append("rect")
    	.attr("x", width - 18)
    	.attr("y", 50)
      	.attr("width", 18)
      	.attr("height", 2)
      	.style("fill", "red");

    svg.append("text")
      	.attr("x", width - 24)
      	.attr("y", 50)
      	.attr("dy", ".35em")
      	.style("text-anchor", "end")
      	.text(covariate);

    var legendBlocker = svg.append("rect")
      .attr("id", "legendBlocker")
      .attr("width", 100)
      .attr("height", 20)
      .attr("x", width - 100)
      .attr("y", 40)
      .style("fill", "white")
      .style("opacity", 1);

});

</script>

{% endblock %}
